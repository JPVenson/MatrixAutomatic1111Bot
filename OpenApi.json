{
    "openapi": "3.0.2",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "paths": {
        "/user": {
            "get": {
                "summary": "Get Current User",
                "operationId": "get_current_user_user_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Current User User Get",
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/login_check": {
            "get": {
                "summary": "Login Check",
                "operationId": "login_check_login_check_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/token": {
            "get": {
                "summary": "Get Token",
                "operationId": "get_token_token_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Token Token Get",
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/app_id": {
            "get": {
                "summary": "App Id",
                "operationId": "app_id_app_id_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response App Id App Id Get",
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "summary": "Login",
                "operationId": "login_login_post",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_login_login_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/": {
            "get": {
                "summary": "Main",
                "operationId": "main__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "head": {
                "summary": "Main",
                "operationId": "main__head",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/info": {
            "get": {
                "summary": "Api Info",
                "operationId": "api_info_info_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Serialize",
                            "type": "boolean",
                            "default": true
                        },
                        "name": "serialize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/config": {
            "get": {
                "summary": "Get Config",
                "operationId": "get_config_config_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/static/{path}": {
            "get": {
                "summary": "Static Resource",
                "operationId": "static_resource_static__path__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Path",
                            "type": "string"
                        },
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/assets/{path}": {
            "get": {
                "summary": "Build Resource",
                "operationId": "build_resource_assets__path__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Path",
                            "type": "string"
                        },
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/file={path_or_url}": {
            "get": {
                "summary": "File",
                "operationId": "file_file__path_or_url__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Path Or Url",
                            "type": "string"
                        },
                        "name": "path_or_url",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "head": {
                "summary": "File",
                "operationId": "file_file__path_or_url__head",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Path Or Url",
                            "type": "string"
                        },
                        "name": "path_or_url",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/stream/{session_hash}/{run}/{component_id}": {
            "get": {
                "summary": "Stream",
                "operationId": "stream_stream__session_hash___run___component_id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Session Hash",
                            "type": "string"
                        },
                        "name": "session_hash",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Run",
                            "type": "integer"
                        },
                        "name": "run",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Component Id",
                            "type": "integer"
                        },
                        "name": "component_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/file/{path}": {
            "get": {
                "summary": "File Deprecated",
                "operationId": "file_deprecated_file__path__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Path",
                            "type": "string"
                        },
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/reset": {
            "post": {
                "summary": "Reset Iterator",
                "operationId": "reset_iterator_reset_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResetBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/{api_name}": {
            "post": {
                "summary": "Predict",
                "operationId": "predict_api__api_name__post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Api Name",
                            "type": "string"
                        },
                        "name": "api_name",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PredictBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/run/{api_name}": {
            "post": {
                "summary": "Predict",
                "operationId": "predict_run__api_name__post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Api Name",
                            "type": "string"
                        },
                        "name": "api_name",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PredictBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/queue/status": {
            "get": {
                "summary": "Get Queue Status",
                "operationId": "get_queue_status_queue_status_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Estimation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/upload": {
            "post": {
                "summary": "Upload File",
                "operationId": "upload_file_upload_post",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_upload_file_upload_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/startup-events": {
            "get": {
                "summary": "Startup Events",
                "operationId": "startup_events_startup_events_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/internal/progress": {
            "post": {
                "summary": "Progressapi",
                "operationId": "progressapi_internal_progress_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProgressRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/modules__progress__ProgressResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/internal/quicksettings-hint": {
            "get": {
                "summary": "Quicksettings Hint",
                "operationId": "quicksettings_hint_internal_quicksettings_hint_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Quicksettings Hint Internal Quicksettings Hint Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/QuicksettingsHint"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/internal/ping": {
            "get": {
                "summary": "<Lambda>",
                "operationId": "_lambda__internal_ping_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/internal/profile-startup": {
            "get": {
                "summary": "<Lambda>",
                "operationId": "_lambda__internal_profile_startup_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/internal/sysinfo": {
            "get": {
                "summary": "Download Sysinfo",
                "operationId": "download_sysinfo_internal_sysinfo_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Attachment",
                            "default": false
                        },
                        "name": "attachment",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/internal/sysinfo-download": {
            "get": {
                "summary": "<Lambda>",
                "operationId": "_lambda__internal_sysinfo_download_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/txt2img": {
            "post": {
                "summary": "Text2Imgapi",
                "operationId": "text2imgapi_sdapi_v1_txt2img_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StableDiffusionProcessingTxt2Img"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TextToImageResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/img2img": {
            "post": {
                "summary": "Img2Imgapi",
                "operationId": "img2imgapi_sdapi_v1_img2img_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StableDiffusionProcessingImg2Img"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ImageToImageResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/extra-single-image": {
            "post": {
                "summary": "Extras Single Image Api",
                "operationId": "extras_single_image_api_sdapi_v1_extra_single_image_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExtrasSingleImageRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtrasSingleImageResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/extra-batch-images": {
            "post": {
                "summary": "Extras Batch Images Api",
                "operationId": "extras_batch_images_api_sdapi_v1_extra_batch_images_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExtrasBatchImagesRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExtrasBatchImagesResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/png-info": {
            "post": {
                "summary": "Pnginfoapi",
                "operationId": "pnginfoapi_sdapi_v1_png_info_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PNGInfoRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PNGInfoResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/progress": {
            "get": {
                "summary": "Progressapi",
                "operationId": "progressapi_sdapi_v1_progress_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Skip Current Image",
                            "type": "boolean",
                            "default": false
                        },
                        "name": "skip_current_image",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/modules__api__models__ProgressResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/interrogate": {
            "post": {
                "summary": "Interrogateapi",
                "operationId": "interrogateapi_sdapi_v1_interrogate_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InterrogateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/interrupt": {
            "post": {
                "summary": "Interruptapi",
                "operationId": "interruptapi_sdapi_v1_interrupt_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/skip": {
            "post": {
                "summary": "Skip",
                "operationId": "skip_sdapi_v1_skip_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/options": {
            "get": {
                "summary": "Get Config",
                "operationId": "get_config_sdapi_v1_options_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Options"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Set Config",
                "operationId": "set_config_sdapi_v1_options_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Req",
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/cmd-flags": {
            "get": {
                "summary": "Get Cmd Flags",
                "operationId": "get_cmd_flags_sdapi_v1_cmd_flags_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Flags"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/samplers": {
            "get": {
                "summary": "Get Samplers",
                "operationId": "get_samplers_sdapi_v1_samplers_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Samplers Sdapi V1 Samplers Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SamplerItem"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/upscalers": {
            "get": {
                "summary": "Get Upscalers",
                "operationId": "get_upscalers_sdapi_v1_upscalers_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Upscalers Sdapi V1 Upscalers Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UpscalerItem"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/latent-upscale-modes": {
            "get": {
                "summary": "Get Latent Upscale Modes",
                "operationId": "get_latent_upscale_modes_sdapi_v1_latent_upscale_modes_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Latent Upscale Modes Sdapi V1 Latent Upscale Modes Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LatentUpscalerModeItem"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/sd-models": {
            "get": {
                "summary": "Get Sd Models",
                "operationId": "get_sd_models_sdapi_v1_sd_models_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Sd Models Sdapi V1 Sd Models Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SDModelItem"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/sd-vae": {
            "get": {
                "summary": "Get Sd Vaes",
                "operationId": "get_sd_vaes_sdapi_v1_sd_vae_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Sd Vaes Sdapi V1 Sd Vae Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SDVaeItem"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/hypernetworks": {
            "get": {
                "summary": "Get Hypernetworks",
                "operationId": "get_hypernetworks_sdapi_v1_hypernetworks_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Hypernetworks Sdapi V1 Hypernetworks Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/HypernetworkItem"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/face-restorers": {
            "get": {
                "summary": "Get Face Restorers",
                "operationId": "get_face_restorers_sdapi_v1_face_restorers_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Face Restorers Sdapi V1 Face Restorers Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FaceRestorerItem"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/realesrgan-models": {
            "get": {
                "summary": "Get Realesrgan Models",
                "operationId": "get_realesrgan_models_sdapi_v1_realesrgan_models_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Realesrgan Models Sdapi V1 Realesrgan Models Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/RealesrganItem"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/prompt-styles": {
            "get": {
                "summary": "Get Prompt Styles",
                "operationId": "get_prompt_styles_sdapi_v1_prompt_styles_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Prompt Styles Sdapi V1 Prompt Styles Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PromptStyleItem"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/embeddings": {
            "get": {
                "summary": "Get Embeddings",
                "operationId": "get_embeddings_sdapi_v1_embeddings_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmbeddingsResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/refresh-checkpoints": {
            "post": {
                "summary": "Refresh Checkpoints",
                "operationId": "refresh_checkpoints_sdapi_v1_refresh_checkpoints_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/refresh-vae": {
            "post": {
                "summary": "Refresh Vae",
                "operationId": "refresh_vae_sdapi_v1_refresh_vae_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/create/embedding": {
            "post": {
                "summary": "Create Embedding",
                "operationId": "create_embedding_sdapi_v1_create_embedding_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Args",
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/create/hypernetwork": {
            "post": {
                "summary": "Create Hypernetwork",
                "operationId": "create_hypernetwork_sdapi_v1_create_hypernetwork_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Args",
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/preprocess": {
            "post": {
                "summary": "Preprocess",
                "operationId": "preprocess_sdapi_v1_preprocess_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Args",
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreprocessResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/train/embedding": {
            "post": {
                "summary": "Train Embedding",
                "operationId": "train_embedding_sdapi_v1_train_embedding_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Args",
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TrainResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/train/hypernetwork": {
            "post": {
                "summary": "Train Hypernetwork",
                "operationId": "train_hypernetwork_sdapi_v1_train_hypernetwork_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Args",
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TrainResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/memory": {
            "get": {
                "summary": "Get Memory",
                "operationId": "get_memory_sdapi_v1_memory_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MemoryResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/unload-checkpoint": {
            "post": {
                "summary": "Unloadapi",
                "operationId": "unloadapi_sdapi_v1_unload_checkpoint_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/reload-checkpoint": {
            "post": {
                "summary": "Reloadapi",
                "operationId": "reloadapi_sdapi_v1_reload_checkpoint_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/scripts": {
            "get": {
                "summary": "Get Scripts List",
                "operationId": "get_scripts_list_sdapi_v1_scripts_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScriptsList"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/script-info": {
            "get": {
                "summary": "Get Script Info",
                "operationId": "get_script_info_sdapi_v1_script_info_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Get Script Info Sdapi V1 Script Info Get",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ScriptInfo"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sd_extra_networks/thumb": {
            "get": {
                "summary": "Fetch File",
                "operationId": "fetch_file_sd_extra_networks_thumb_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Filename",
                            "type": "string",
                            "default": ""
                        },
                        "name": "filename",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sd_extra_networks/metadata": {
            "get": {
                "summary": "Get Metadata",
                "operationId": "get_metadata_sd_extra_networks_metadata_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Page",
                            "type": "string",
                            "default": ""
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Item",
                            "type": "string",
                            "default": ""
                        },
                        "name": "item",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sd_extra_networks/get-single-card": {
            "get": {
                "summary": "Get Single Card",
                "operationId": "get_single_card_sd_extra_networks_get_single_card_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Page",
                            "type": "string",
                            "default": ""
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Tabname",
                            "type": "string",
                            "default": ""
                        },
                        "name": "tabname",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Name",
                            "type": "string",
                            "default": ""
                        },
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/system-info/status": {
            "get": {
                "summary": "Get Status Api",
                "operationId": "get_status_api_sdapi_v1_system_info_status_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "State",
                            "type": "boolean",
                            "default": false
                        },
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Memory",
                            "type": "boolean",
                            "default": false
                        },
                        "name": "memory",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Full",
                            "type": "boolean",
                            "default": false
                        },
                        "name": "full",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Refresh",
                            "type": "boolean",
                            "default": false
                        },
                        "name": "refresh",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StatusRes"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/controlnet/version": {
            "get": {
                "summary": "Version",
                "operationId": "version_controlnet_version_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/controlnet/model_list": {
            "get": {
                "summary": "Model List",
                "operationId": "model_list_controlnet_model_list_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Update",
                            "type": "boolean",
                            "default": true
                        },
                        "name": "update",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/controlnet/module_list": {
            "get": {
                "summary": "Module List",
                "operationId": "module_list_controlnet_module_list_get",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Alias Names",
                            "type": "boolean",
                            "default": false
                        },
                        "name": "alias_names",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/controlnet/control_types": {
            "get": {
                "summary": "Control Types",
                "operationId": "control_types_controlnet_control_types_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/controlnet/settings": {
            "get": {
                "summary": "Settings",
                "operationId": "settings_controlnet_settings_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/controlnet/detect": {
            "post": {
                "summary": "Detect",
                "operationId": "detect_controlnet_detect_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_detect_controlnet_detect_post"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/cancel": {
            "get": {
                "summary": "Cancel Jobs",
                "description": "Check the current state of Dreambooth processes.\n@return:",
                "operationId": "cancel_jobs_dreambooth_cancel_get",
                "parameters": [
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/checkpoint": {
            "get": {
                "summary": "Get Checkpoint",
                "description": "Generate and zip a checkpoint for a specified model.",
                "operationId": "get_checkpoint_dreambooth_checkpoint_get",
                "parameters": [
                    {
                        "description": "The model name of the checkpoint to get.",
                        "required": true,
                        "schema": {
                            "title": "Model Name",
                            "type": "string",
                            "description": "The model name of the checkpoint to get."
                        },
                        "name": "model_name",
                        "in": "query"
                    },
                    {
                        "description": "Set to false to re-compile the checkpoint before retrieval.",
                        "required": false,
                        "schema": {
                            "title": "Skip Build",
                            "type": "boolean",
                            "description": "Set to false to re-compile the checkpoint before retrieval.",
                            "default": true
                        },
                        "name": "skip_build",
                        "in": "query"
                    },
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/checkpoints": {
            "get": {
                "summary": "Get Checkpoints",
                "description": "Collect the current list of available source checkpoints.",
                "operationId": "get_checkpoints_dreambooth_checkpoints_get",
                "parameters": [
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/classifiers": {
            "get": {
                "summary": "Get Classifiers",
                "description": "Retrieve generated classifier images from a saved model config.",
                "operationId": "get_classifiers_dreambooth_classifiers_get",
                "parameters": [
                    {
                        "description": "The model name to retrieve classifiers for.",
                        "required": true,
                        "schema": {
                            "title": "Model Name",
                            "type": "string",
                            "description": "The model name to retrieve classifiers for."
                        },
                        "name": "model_name",
                        "in": "query"
                    },
                    {
                        "description": "If set, will retrieve the specified concept's class images. Otherwise, all class images will be retrieved.",
                        "required": false,
                        "schema": {
                            "title": "Concept Idx",
                            "type": "integer",
                            "description": "If set, will retrieve the specified concept's class images. Otherwise, all class images will be retrieved.",
                            "default": -1
                        },
                        "name": "concept_idx",
                        "in": "query"
                    },
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Generate Classes",
                "description": "Generate classification images for a model based on a saved config.",
                "operationId": "generate_classes_dreambooth_classifiers_post",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_generate_classes_dreambooth_classifiers_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/concept": {
            "post": {
                "summary": "Set Model Concept",
                "description": "Add or update a concept. Provide either a full json concept or path to instance dir.",
                "operationId": "set_model_concept_dreambooth_concept_post",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_set_model_concept_dreambooth_concept_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/concepts": {
            "get": {
                "summary": "Get Model Concepts",
                "description": "Get a model's concepts.",
                "operationId": "get_model_concepts_dreambooth_concepts_get",
                "parameters": [
                    {
                        "description": "The model name to fetch config for.",
                        "required": true,
                        "schema": {
                            "title": "Model Name",
                            "type": "string",
                            "description": "The model name to fetch config for."
                        },
                        "name": "model_name",
                        "in": "query"
                    },
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Set Model Concepts",
                "description": "Replace a full concepts list.",
                "operationId": "set_model_concepts_dreambooth_concepts_post",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_set_model_concepts_dreambooth_concepts_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/createModel": {
            "post": {
                "summary": "Create Db Model",
                "description": "Create a new Dreambooth model.",
                "operationId": "create_db_model_dreambooth_createModel_post",
                "parameters": [
                    {
                        "description": "The name of the model to create.",
                        "required": true,
                        "schema": {
                            "title": "New Model Name",
                            "type": "string",
                            "description": "The name of the model to create."
                        },
                        "name": "new_model_name",
                        "in": "query"
                    },
                    {
                        "description": "The source checkpoint to extract to create this model.",
                        "required": true,
                        "schema": {
                            "title": "New Model Src",
                            "type": "string",
                            "description": "The source checkpoint to extract to create this model."
                        },
                        "name": "new_model_src",
                        "in": "query"
                    },
                    {
                        "description": "The shared diffusers source to use for this differs model.",
                        "required": false,
                        "schema": {
                            "title": "New Model Shared Src",
                            "type": "string",
                            "description": "The shared diffusers source to use for this differs model."
                        },
                        "name": "new_model_shared_src",
                        "in": "query"
                    },
                    {
                        "description": "Create this model from the hub",
                        "required": false,
                        "schema": {
                            "title": "Create From Hub",
                            "type": "boolean",
                            "description": "Create this model from the hub",
                            "default": false
                        },
                        "name": "create_from_hub",
                        "in": "query"
                    },
                    {
                        "description": "The hub URL to use for this model. Must contain diffusers model.",
                        "required": false,
                        "schema": {
                            "title": "New Model Url",
                            "type": "string",
                            "description": "The hub URL to use for this model. Must contain diffusers model."
                        },
                        "name": "new_model_url",
                        "in": "query"
                    },
                    {
                        "description": "Model type (v1x/v2x-512/v2x/sdxl)",
                        "required": false,
                        "schema": {
                            "title": "Model Type",
                            "type": "string",
                            "description": "Model type (v1x/v2x-512/v2x/sdxl)",
                            "default": "v1x"
                        },
                        "name": "model_type",
                        "in": "query"
                    },
                    {
                        "description": "Un-freeze the model.",
                        "required": false,
                        "schema": {
                            "title": "Train Unfrozen",
                            "type": "boolean",
                            "description": "Un-freeze the model.",
                            "default": true
                        },
                        "name": "train_unfrozen",
                        "in": "query"
                    },
                    {
                        "description": "Your huggingface hub token.",
                        "required": false,
                        "schema": {
                            "title": "New Model Token",
                            "type": "string",
                            "description": "Your huggingface hub token."
                        },
                        "name": "new_model_token",
                        "in": "query"
                    },
                    {
                        "description": "Whether to extract EMA weights if present.",
                        "required": false,
                        "schema": {
                            "title": "New Model Extract Ema",
                            "type": "boolean",
                            "description": "Whether to extract EMA weights if present.",
                            "default": false
                        },
                        "name": "new_model_extract_ema",
                        "in": "query"
                    },
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/model": {
            "delete": {
                "summary": "Delete Model",
                "operationId": "delete_model_dreambooth_model_delete",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_delete_model_dreambooth_model_delete"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/model_config": {
            "get": {
                "summary": "Get Model Config",
                "description": "Get a specified model config.",
                "operationId": "get_model_config_dreambooth_model_config_get",
                "parameters": [
                    {
                        "description": "The model name to fetch config for.",
                        "required": true,
                        "schema": {
                            "title": "Model Name",
                            "type": "string",
                            "description": "The model name to fetch config for."
                        },
                        "name": "model_name",
                        "in": "query"
                    },
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Set Model Config",
                "description": "Save a model config from JSON.",
                "operationId": "set_model_config_dreambooth_model_config_post",
                "parameters": [
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api-Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api-key",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Model Cfg",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/DreamboothConfig"
                                    }
                                ],
                                "description": "The config to save"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/model_params": {
            "post": {
                "summary": "Set Model Params",
                "description": "Update an existing model configuration's parameters from a dictionary of values.",
                "operationId": "set_model_params_dreambooth_model_params_post",
                "parameters": [
                    {
                        "description": "The model name to update params for.",
                        "required": true,
                        "schema": {
                            "title": "Model Name",
                            "type": "string",
                            "description": "The model name to update params for."
                        },
                        "name": "model_name",
                        "in": "query"
                    },
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    },
                    {
                        "description": "A json string representing a dictionary of parameters to set.",
                        "required": true,
                        "schema": {
                            "title": "Params",
                            "type": "string",
                            "description": "A json string representing a dictionary of parameters to set."
                        },
                        "name": "params",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/models": {
            "get": {
                "summary": "Get Models",
                "description": "Args:\n    api_key: The api key\n\nReturns: A list of Dreambooth model names.",
                "operationId": "get_models_dreambooth_models_get",
                "parameters": [
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/models_lora": {
            "get": {
                "summary": "Get Models Lora",
                "description": "Args:\n    api_key: API Key.\n    model_name: The model name to query for lora files.\n\nReturns: A list of LoRA Models.",
                "operationId": "get_models_lora_dreambooth_models_lora_get",
                "parameters": [
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    },
                    {
                        "description": "The model name to query for lora files.",
                        "required": true,
                        "schema": {
                            "title": "Model Name",
                            "type": "string",
                            "description": "The model name to query for lora files."
                        },
                        "name": "model_name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/samples": {
            "get": {
                "summary": "Api Generate Samples",
                "description": "Generate sample images for a specified model.",
                "operationId": "api_generate_samples_dreambooth_samples_get",
                "parameters": [
                    {
                        "description": "The model name to use for generating samples.",
                        "required": true,
                        "schema": {
                            "title": "Model Name",
                            "type": "string",
                            "description": "The model name to use for generating samples."
                        },
                        "name": "model_name",
                        "in": "query"
                    },
                    {
                        "description": "The prompt to use to generate sample images.",
                        "required": false,
                        "schema": {
                            "title": "Sample Prompt",
                            "type": "string",
                            "description": "The prompt to use to generate sample images.",
                            "default": ""
                        },
                        "name": "sample_prompt",
                        "in": "query"
                    },
                    {
                        "description": "A file of pre-generated sample prompts.",
                        "required": false,
                        "schema": {
                            "title": "Sample Prompt File",
                            "type": "string",
                            "description": "A file of pre-generated sample prompts.",
                            "default": ""
                        },
                        "name": "sample_prompt_file",
                        "in": "query"
                    },
                    {
                        "description": "An optional negative prompt to use when generating images.",
                        "required": false,
                        "schema": {
                            "title": "Negative Prompt",
                            "type": "string",
                            "description": "An optional negative prompt to use when generating images.",
                            "default": ""
                        },
                        "name": "negative_prompt",
                        "in": "query"
                    },
                    {
                        "description": "Sample width",
                        "required": false,
                        "schema": {
                            "title": "Width",
                            "type": "integer",
                            "description": "Sample width",
                            "default": 512
                        },
                        "name": "width",
                        "in": "query"
                    },
                    {
                        "description": "Sample height",
                        "required": false,
                        "schema": {
                            "title": "Height",
                            "type": "integer",
                            "description": "Sample height",
                            "default": 512
                        },
                        "name": "height",
                        "in": "query"
                    },
                    {
                        "description": "The number of sample images to generate.",
                        "required": false,
                        "schema": {
                            "title": "Num Images",
                            "type": "integer",
                            "description": "The number of sample images to generate.",
                            "default": 1
                        },
                        "name": "num_images",
                        "in": "query"
                    },
                    {
                        "description": "How many images to generate at once.",
                        "required": false,
                        "schema": {
                            "title": "Batch Size",
                            "type": "integer",
                            "description": "How many images to generate at once.",
                            "default": 1
                        },
                        "name": "batch_size",
                        "in": "query"
                    },
                    {
                        "description": "The seed to use when generating samples",
                        "required": false,
                        "schema": {
                            "title": "Seed",
                            "type": "integer",
                            "format": "int64",
                            "description": "The seed to use when generating samples",
                            "default": -1
                        },
                        "name": "seed",
                        "in": "query"
                    },
                    {
                        "description": "Number of sampling steps to use when generating images.",
                        "required": false,
                        "schema": {
                            "title": "Steps",
                            "type": "integer",
                            "description": "Number of sampling steps to use when generating images.",
                            "default": 60
                        },
                        "name": "steps",
                        "in": "query"
                    },
                    {
                        "description": "CFG scale to use when generating images.",
                        "required": false,
                        "schema": {
                            "title": "Scale",
                            "type": "number",
                            "description": "CFG scale to use when generating images.",
                            "default": 7.5
                        },
                        "name": "scale",
                        "in": "query"
                    },
                    {
                        "description": "Image Generation Library.",
                        "required": false,
                        "schema": {
                            "title": "Class Gen Method",
                            "type": "string",
                            "description": "Image Generation Library.",
                            "default": "Native Diffusers"
                        },
                        "name": "class_gen_method",
                        "in": "query"
                    },
                    {
                        "description": "Sampler to use if not using txt2img",
                        "required": false,
                        "schema": {
                            "title": "Scheduler",
                            "type": "string",
                            "description": "Sampler to use if not using txt2img",
                            "default": "DEISMultistep"
                        },
                        "name": "scheduler",
                        "in": "query"
                    },
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/status": {
            "get": {
                "summary": "Check Status",
                "description": "Check the current state of Dreambooth processes.\n@return:",
                "operationId": "check_status_dreambooth_status_get",
                "parameters": [
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/status_images": {
            "get": {
                "summary": "Check Status Images",
                "description": "Retrieve any images that may currently be present in the state.\nArgs:\n    api_key: An API key, if one has been set in the UI.\n\nReturns:\n    A single image or zip of images, depending on how many exist.",
                "operationId": "check_status_images_dreambooth_status_images_get",
                "parameters": [
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/start_training": {
            "post": {
                "summary": "Train",
                "description": "Start training dreambooth.",
                "operationId": "train_dreambooth_start_training_post",
                "parameters": [
                    {
                        "description": "The model name to load params for.",
                        "required": false,
                        "schema": {
                            "title": "Model Name",
                            "type": "string",
                            "description": "The model name to load params for."
                        },
                        "name": "model_name",
                        "in": "query"
                    },
                    {
                        "description": "Use txt2img to generate class images.",
                        "required": false,
                        "schema": {
                            "title": "Use Tx2Img",
                            "type": "boolean",
                            "description": "Use txt2img to generate class images.",
                            "default": true
                        },
                        "name": "use_tx2img",
                        "in": "query"
                    },
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/upload": {
            "post": {
                "summary": "Upload Db Images",
                "description": "Upload images for training.\n\nRequest body should be a JSON Object. Primary key is 'imageList'.\n\n'imageList' is a list of objects. Each object should have three values:\n'data' - A base64-encoded string containing the binary data of the image.\n'name' - The filename to store the image under.\n'txt' - The caption for the image. Will be stored in a text file beside the image.",
                "operationId": "upload_db_images_dreambooth_upload_post",
                "parameters": [
                    {
                        "description": "The model name to upload images for.",
                        "required": true,
                        "schema": {
                            "title": "Model Name",
                            "type": "string",
                            "description": "The model name to upload images for."
                        },
                        "name": "model_name",
                        "in": "query"
                    },
                    {
                        "description": "The concept/instance name the images are for.",
                        "required": true,
                        "schema": {
                            "title": "Instance Name",
                            "type": "string",
                            "description": "The concept/instance name the images are for."
                        },
                        "name": "instance_name",
                        "in": "query"
                    },
                    {
                        "description": "Enable to automatically append the new concept to the model config.",
                        "required": false,
                        "schema": {
                            "title": "Create Concept",
                            "type": "boolean",
                            "description": "Enable to automatically append the new concept to the model config.",
                            "default": true
                        },
                        "name": "create_concept",
                        "in": "query"
                    },
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Images",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/DbImagesRequest"
                                    }
                                ],
                                "description": "A dictionary of images, filenames, and prompts to save."
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/dreambooth/upload_url": {
            "post": {
                "summary": "Upload Db Images Url",
                "description": "Upload images for training.\n\nRequest body should be a JSON Object. Primary key is 'imageList'.\n\n'imageList' is a list of objects. Each object should have three values:\n'data' - A base64-encoded string containing the binary data of the image.\n'name' - The filename to store the image under.\n'txt' - The caption for the image. Will be stored in a text file beside the image.",
                "operationId": "upload_db_images_url_dreambooth_upload_url_post",
                "parameters": [
                    {
                        "description": "The model name to upload images for.",
                        "required": true,
                        "schema": {
                            "title": "Model Name",
                            "type": "string",
                            "description": "The model name to upload images for."
                        },
                        "name": "model_name",
                        "in": "query"
                    },
                    {
                        "description": "The concept/instance name the images are for.",
                        "required": true,
                        "schema": {
                            "title": "Instance Name",
                            "type": "string",
                            "description": "The concept/instance name the images are for."
                        },
                        "name": "instance_name",
                        "in": "query"
                    },
                    {
                        "description": "Enable to automatically append the new concept to the model config.",
                        "required": false,
                        "schema": {
                            "title": "Create Concept",
                            "type": "boolean",
                            "description": "Enable to automatically append the new concept to the model config.",
                            "default": true
                        },
                        "name": "create_concept",
                        "in": "query"
                    },
                    {
                        "description": "If an API key is set, this must be present.",
                        "required": false,
                        "schema": {
                            "title": "Api Key",
                            "type": "string",
                            "description": "If an API key is set, this must be present.",
                            "default": ""
                        },
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Images",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/DbImagesRequest"
                                    }
                                ],
                                "description": "A dictionary of images, filenames, and prompts to save."
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/loras": {
            "get": {
                "summary": "Get Loras",
                "operationId": "get_loras_sdapi_v1_loras_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/sdapi/v1/refresh-loras": {
            "post": {
                "summary": "Refresh Loras",
                "operationId": "refresh_loras_sdapi_v1_refresh_loras_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Body_delete_model_dreambooth_model_delete": {
                "title": "Body_delete_model_dreambooth_model_delete",
                "required": [
                    "model_name"
                ],
                "type": "object",
                "properties": {
                    "model_name": {
                        "title": "Model Name",
                        "type": "string",
                        "description": "The model to delete."
                    },
                    "api_key": {
                        "title": "Api Key",
                        "type": "string",
                        "description": "If an API key is set, this must be present.",
                        "default": ""
                    }
                }
            },
            "Body_detect_controlnet_detect_post": {
                "title": "Body_detect_controlnet_detect_post",
                "type": "object",
                "properties": {
                    "controlnet_module": {
                        "title": "Controlnet Module",
                        "type": "string",
                        "default": "none"
                    },
                    "controlnet_input_images": {
                        "title": "Controlnet Input Images",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": []
                    },
                    "controlnet_processor_res": {
                        "title": "Controlnet Processor Resolution",
                        "type": "integer",
                        "default": 512
                    },
                    "controlnet_threshold_a": {
                        "title": "Controlnet Threshold a",
                        "type": "number",
                        "default": 64
                    },
                    "controlnet_threshold_b": {
                        "title": "Controlnet Threshold b",
                        "type": "number",
                        "default": 64
                    }
                }
            },
            "Body_generate_classes_dreambooth_classifiers_post": {
                "title": "Body_generate_classes_dreambooth_classifiers_post",
                "required": [
                    "model_name"
                ],
                "type": "object",
                "properties": {
                    "model_name": {
                        "title": "Model Name",
                        "type": "string",
                        "description": "The model name to generate classifiers for."
                    },
                    "class_gen_method": {
                        "title": "Class Gen Method",
                        "type": "string",
                        "description": "Image Generation Library.",
                        "default": "Native Diffusers"
                    },
                    "api_key": {
                        "title": "Api Key",
                        "type": "string",
                        "description": "If an API key is set, this must be present.",
                        "default": ""
                    }
                }
            },
            "Body_login_login__post": {
                "title": "Body_login_login__post",
                "required": [
                    "username",
                    "password"
                ],
                "type": "object",
                "properties": {
                    "grant_type": {
                        "title": "Grant Type",
                        "pattern": "password",
                        "type": "string"
                    },
                    "username": {
                        "title": "Username",
                        "type": "string"
                    },
                    "password": {
                        "title": "Password",
                        "type": "string"
                    },
                    "scope": {
                        "title": "Scope",
                        "type": "string",
                        "default": ""
                    },
                    "client_id": {
                        "title": "Client Id",
                        "type": "string"
                    },
                    "client_secret": {
                        "title": "Client Secret",
                        "type": "string"
                    }
                }
            },
            "Body_login_login_post": {
                "title": "Body_login_login_post",
                "required": [
                    "username",
                    "password"
                ],
                "type": "object",
                "properties": {
                    "grant_type": {
                        "title": "Grant Type",
                        "pattern": "password",
                        "type": "string"
                    },
                    "username": {
                        "title": "Username",
                        "type": "string"
                    },
                    "password": {
                        "title": "Password",
                        "type": "string"
                    },
                    "scope": {
                        "title": "Scope",
                        "type": "string",
                        "default": ""
                    },
                    "client_id": {
                        "title": "Client Id",
                        "type": "string"
                    },
                    "client_secret": {
                        "title": "Client Secret",
                        "type": "string"
                    }
                }
            },
            "Body_set_model_concept_dreambooth_concept_post": {
                "title": "Body_set_model_concept_dreambooth_concept_post",
                "required": [
                    "model_name"
                ],
                "type": "object",
                "properties": {
                    "model_name": {
                        "title": "Model Name",
                        "type": "string",
                        "description": "The model name to fetch config for."
                    },
                    "instance_dir": {
                        "title": "Instance Dir",
                        "type": "string",
                        "description": "The directory containing training images.",
                        "default": ""
                    },
                    "instance_token": {
                        "title": "Instance Token",
                        "type": "string",
                        "description": "The instance token to use.",
                        "default": ""
                    },
                    "class_token": {
                        "title": "Class Token",
                        "type": "string",
                        "description": "The class token to use.",
                        "default": ""
                    },
                    "api_key": {
                        "title": "Api Key",
                        "type": "string",
                        "description": "If an API key is set, this must be present.",
                        "default": ""
                    },
                    "concept": {
                        "title": "Concept",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Concept"
                            }
                        ],
                        "description": "A concept to update or add to the model."
                    }
                }
            },
            "Body_set_model_concepts_dreambooth_concepts_post": {
                "title": "Body_set_model_concepts_dreambooth_concepts_post",
                "required": [
                    "model_name",
                    "concepts"
                ],
                "type": "object",
                "properties": {
                    "model_name": {
                        "title": "Model Name",
                        "type": "string",
                        "description": "The model name to fetch config for."
                    },
                    "api_key": {
                        "title": "Api Key",
                        "type": "string",
                        "description": "If an API key is set, this must be present.",
                        "default": ""
                    },
                    "concepts": {
                        "title": "Concepts",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Concept"
                        }
                    }
                }
            },
            "Body_upload_file_upload_post": {
                "title": "Body_upload_file_upload_post",
                "required": [
                    "files"
                ],
                "type": "object",
                "properties": {
                    "files": {
                        "title": "Files",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "binary"
                        }
                    }
                }
            },
            "Concept": {
                "title": "Concept",
                "type": "object",
                "properties": {
                    "class_data_dir": {
                        "title": "Class Data Dir",
                        "type": "string",
                        "default": ""
                    },
                    "class_guidance_scale": {
                        "title": "Class Guidance Scale",
                        "type": "number",
                        "default": 7.5
                    },
                    "class_infer_steps": {
                        "title": "Class Infer Steps",
                        "type": "integer",
                        "default": 60
                    },
                    "class_negative_prompt": {
                        "title": "Class Negative Prompt",
                        "type": "string",
                        "default": ""
                    },
                    "class_prompt": {
                        "title": "Class Prompt",
                        "type": "string",
                        "default": ""
                    },
                    "class_token": {
                        "title": "Class Token",
                        "type": "string",
                        "default": ""
                    },
                    "instance_data_dir": {
                        "title": "Instance Data Dir",
                        "type": "string",
                        "default": ""
                    },
                    "instance_prompt": {
                        "title": "Instance Prompt",
                        "type": "string",
                        "default": ""
                    },
                    "instance_token": {
                        "title": "Instance Token",
                        "type": "string",
                        "default": ""
                    },
                    "is_valid": {
                        "title": "Is Valid",
                        "type": "boolean",
                        "default": false
                    },
                    "n_save_sample": {
                        "title": "N Save Sample",
                        "type": "integer",
                        "default": 1
                    },
                    "num_class_images_per": {
                        "title": "Num Class Images Per",
                        "type": "integer",
                        "default": 0
                    },
                    "sample_seed": {
                        "title": "Sample Seed",
                        "type": "integer",
                        "default": -1
                    },
                    "save_guidance_scale": {
                        "title": "Save Guidance Scale",
                        "type": "number",
                        "default": 7.5
                    },
                    "save_infer_steps": {
                        "title": "Save Infer Steps",
                        "type": "integer",
                        "default": 20
                    },
                    "save_sample_negative_prompt": {
                        "title": "Save Sample Negative Prompt",
                        "type": "string",
                        "default": ""
                    },
                    "save_sample_prompt": {
                        "title": "Save Sample Prompt",
                        "type": "string",
                        "default": ""
                    },
                    "save_sample_template": {
                        "title": "Save Sample Template",
                        "type": "string",
                        "default": ""
                    }
                }
            },
            "CreateResponse": {
                "title": "CreateResponse",
                "required": [
                    "info"
                ],
                "type": "object",
                "properties": {
                    "info": {
                        "title": "Create info",
                        "type": "string",
                        "description": "Response string from create embedding or hypernetwork task."
                    }
                }
            },
            "DbImagesRequest": {
                "title": "DbImagesRequest",
                "required": [
                    "imageList"
                ],
                "type": "object",
                "properties": {
                    "imageList": {
                        "title": "Images",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InstanceData"
                        },
                        "description": "List of images to work on. Must be Base64 strings"
                    }
                }
            },
            "DreamboothConfig": {
                "title": "DreamboothConfig",
                "type": "object",
                "properties": {
                    "weight_decay": {
                        "title": "Weight Decay",
                        "type": "number",
                        "default": 0.01
                    },
                    "attention": {
                        "title": "Attention",
                        "type": "string",
                        "default": "xformers"
                    },
                    "cache_latents": {
                        "title": "Cache Latents",
                        "type": "boolean",
                        "default": true
                    },
                    "clip_skip": {
                        "title": "Clip Skip",
                        "type": "integer",
                        "default": 1
                    },
                    "concepts_list": {
                        "title": "Concepts List",
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "default": []
                    },
                    "concepts_path": {
                        "title": "Concepts Path",
                        "type": "string",
                        "default": ""
                    },
                    "custom_model_name": {
                        "title": "Custom Model Name",
                        "type": "string",
                        "default": ""
                    },
                    "deterministic": {
                        "title": "Deterministic",
                        "type": "boolean",
                        "default": false
                    },
                    "disable_class_matching": {
                        "title": "Disable Class Matching",
                        "type": "boolean",
                        "default": false
                    },
                    "disable_logging": {
                        "title": "Disable Logging",
                        "type": "boolean",
                        "default": false
                    },
                    "ema_predict": {
                        "title": "Ema Predict",
                        "type": "boolean",
                        "default": false
                    },
                    "epoch": {
                        "title": "Epoch",
                        "type": "integer",
                        "default": 0
                    },
                    "epoch_pause_frequency": {
                        "title": "Epoch Pause Frequency",
                        "type": "integer",
                        "default": 0
                    },
                    "epoch_pause_time": {
                        "title": "Epoch Pause Time",
                        "type": "integer",
                        "default": 0
                    },
                    "freeze_clip_normalization": {
                        "title": "Freeze Clip Normalization",
                        "type": "boolean",
                        "default": false
                    },
                    "gradient_accumulation_steps": {
                        "title": "Gradient Accumulation Steps",
                        "type": "integer",
                        "default": 1
                    },
                    "gradient_checkpointing": {
                        "title": "Gradient Checkpointing",
                        "type": "boolean",
                        "default": true
                    },
                    "gradient_set_to_none": {
                        "title": "Gradient Set To None",
                        "type": "boolean",
                        "default": true
                    },
                    "graph_smoothing": {
                        "title": "Graph Smoothing",
                        "type": "integer",
                        "default": 50
                    },
                    "half_model": {
                        "title": "Half Model",
                        "type": "boolean",
                        "default": false
                    },
                    "has_ema": {
                        "title": "Has Ema",
                        "type": "boolean",
                        "default": false
                    },
                    "hflip": {
                        "title": "Hflip",
                        "type": "boolean",
                        "default": false
                    },
                    "infer_ema": {
                        "title": "Infer Ema",
                        "type": "boolean",
                        "default": false
                    },
                    "initial_revision": {
                        "title": "Initial Revision",
                        "type": "integer",
                        "default": 0
                    },
                    "learning_rate": {
                        "title": "Learning Rate",
                        "type": "number",
                        "default": 5E-06
                    },
                    "learning_rate_min": {
                        "title": "Learning Rate Min",
                        "type": "number",
                        "default": 1E-06
                    },
                    "lifetime_revision": {
                        "title": "Lifetime Revision",
                        "type": "integer",
                        "default": 0
                    },
                    "lora_learning_rate": {
                        "title": "Lora Learning Rate",
                        "type": "number",
                        "default": 0.0001
                    },
                    "lora_model_name": {
                        "title": "Lora Model Name",
                        "type": "string",
                        "default": ""
                    },
                    "lora_txt_learning_rate": {
                        "title": "Lora Txt Learning Rate",
                        "type": "number",
                        "default": 5E-05
                    },
                    "lora_txt_rank": {
                        "title": "Lora Txt Rank",
                        "type": "integer",
                        "default": 4
                    },
                    "lora_txt_weight": {
                        "title": "Lora Txt Weight",
                        "type": "number",
                        "default": 1.0
                    },
                    "lora_unet_rank": {
                        "title": "Lora Unet Rank",
                        "type": "integer",
                        "default": 4
                    },
                    "lora_weight": {
                        "title": "Lora Weight",
                        "type": "number",
                        "default": 1.0
                    },
                    "lora_use_buggy_requires_grad": {
                        "title": "Lora Use Buggy Requires Grad",
                        "type": "boolean",
                        "default": false
                    },
                    "lr_cycles": {
                        "title": "Lr Cycles",
                        "type": "integer",
                        "default": 1
                    },
                    "lr_factor": {
                        "title": "Lr Factor",
                        "type": "number",
                        "default": 0.5
                    },
                    "lr_power": {
                        "title": "Lr Power",
                        "type": "number",
                        "default": 1.0
                    },
                    "lr_scale_pos": {
                        "title": "Lr Scale Pos",
                        "type": "number",
                        "default": 0.5
                    },
                    "lr_scheduler": {
                        "title": "Lr Scheduler",
                        "type": "string",
                        "default": "constant_with_warmup"
                    },
                    "lr_warmup_steps": {
                        "title": "Lr Warmup Steps",
                        "type": "integer",
                        "default": 0
                    },
                    "max_token_length": {
                        "title": "Max Token Length",
                        "type": "integer",
                        "default": 75
                    },
                    "mixed_precision": {
                        "title": "Mixed Precision",
                        "type": "string",
                        "default": "fp16"
                    },
                    "model_dir": {
                        "title": "Model Dir",
                        "type": "string",
                        "default": ""
                    },
                    "model_name": {
                        "title": "Model Name",
                        "type": "string",
                        "default": ""
                    },
                    "model_path": {
                        "title": "Model Path",
                        "type": "string",
                        "default": ""
                    },
                    "model_type": {
                        "title": "Model Type",
                        "type": "string",
                        "default": "v1x"
                    },
                    "noise_scheduler": {
                        "title": "Noise Scheduler",
                        "type": "string",
                        "default": "DDPM"
                    },
                    "num_train_epochs": {
                        "title": "Num Train Epochs",
                        "type": "integer",
                        "default": 100
                    },
                    "offset_noise": {
                        "title": "Offset Noise",
                        "type": "number",
                        "default": 0
                    },
                    "optimizer": {
                        "title": "Optimizer",
                        "type": "string",
                        "default": "8bit AdamW"
                    },
                    "pad_tokens": {
                        "title": "Pad Tokens",
                        "type": "boolean",
                        "default": true
                    },
                    "pretrained_model_name_or_path": {
                        "title": "Pretrained Model Name Or Path",
                        "type": "string",
                        "default": ""
                    },
                    "pretrained_vae_name_or_path": {
                        "title": "Pretrained Vae Name Or Path",
                        "type": "string",
                        "default": ""
                    },
                    "prior_loss_scale": {
                        "title": "Prior Loss Scale",
                        "type": "boolean",
                        "default": false
                    },
                    "prior_loss_target": {
                        "title": "Prior Loss Target",
                        "type": "integer",
                        "default": 100
                    },
                    "prior_loss_weight": {
                        "title": "Prior Loss Weight",
                        "type": "number",
                        "default": 0.75
                    },
                    "prior_loss_weight_min": {
                        "title": "Prior Loss Weight Min",
                        "type": "number",
                        "default": 0.1
                    },
                    "resolution": {
                        "title": "Resolution",
                        "type": "integer",
                        "default": 512
                    },
                    "revision": {
                        "title": "Revision",
                        "type": "integer",
                        "default": 0
                    },
                    "sample_batch_size": {
                        "title": "Sample Batch Size",
                        "type": "integer",
                        "default": 1
                    },
                    "sanity_prompt": {
                        "title": "Sanity Prompt",
                        "type": "string",
                        "default": ""
                    },
                    "sanity_seed": {
                        "title": "Sanity Seed",
                        "type": "integer",
                        "default": 420420
                    },
                    "save_ckpt_after": {
                        "title": "Save Ckpt After",
                        "type": "boolean",
                        "default": true
                    },
                    "save_ckpt_cancel": {
                        "title": "Save Ckpt Cancel",
                        "type": "boolean",
                        "default": false
                    },
                    "save_ckpt_during": {
                        "title": "Save Ckpt During",
                        "type": "boolean",
                        "default": true
                    },
                    "save_ema": {
                        "title": "Save Ema",
                        "type": "boolean",
                        "default": true
                    },
                    "save_embedding_every": {
                        "title": "Save Embedding Every",
                        "type": "integer",
                        "default": 25
                    },
                    "save_lora_after": {
                        "title": "Save Lora After",
                        "type": "boolean",
                        "default": true
                    },
                    "save_lora_cancel": {
                        "title": "Save Lora Cancel",
                        "type": "boolean",
                        "default": false
                    },
                    "save_lora_during": {
                        "title": "Save Lora During",
                        "type": "boolean",
                        "default": true
                    },
                    "save_lora_for_extra_net": {
                        "title": "Save Lora For Extra Net",
                        "type": "boolean",
                        "default": true
                    },
                    "save_preview_every": {
                        "title": "Save Preview Every",
                        "type": "integer",
                        "default": 5
                    },
                    "save_safetensors": {
                        "title": "Save Safetensors",
                        "type": "boolean",
                        "default": true
                    },
                    "save_state_after": {
                        "title": "Save State After",
                        "type": "boolean",
                        "default": false
                    },
                    "save_state_cancel": {
                        "title": "Save State Cancel",
                        "type": "boolean",
                        "default": false
                    },
                    "save_state_during": {
                        "title": "Save State During",
                        "type": "boolean",
                        "default": false
                    },
                    "scheduler": {
                        "title": "Scheduler",
                        "type": "string",
                        "default": "ddim"
                    },
                    "shared_diffusers_path": {
                        "title": "Shared Diffusers Path",
                        "type": "string",
                        "default": ""
                    },
                    "shuffle_tags": {
                        "title": "Shuffle Tags",
                        "type": "boolean",
                        "default": true
                    },
                    "snapshot": {
                        "title": "Snapshot",
                        "type": "string",
                        "default": ""
                    },
                    "split_loss": {
                        "title": "Split Loss",
                        "type": "boolean",
                        "default": true
                    },
                    "src": {
                        "title": "Src",
                        "type": "string",
                        "default": ""
                    },
                    "stop_text_encoder": {
                        "title": "Stop Text Encoder",
                        "type": "number",
                        "default": 1.0
                    },
                    "strict_tokens": {
                        "title": "Strict Tokens",
                        "type": "boolean",
                        "default": false
                    },
                    "dynamic_img_norm": {
                        "title": "Dynamic Img Norm",
                        "type": "boolean",
                        "default": false
                    },
                    "tenc_weight_decay": {
                        "title": "Tenc Weight Decay",
                        "type": "number",
                        "default": 0.01
                    },
                    "tenc_grad_clip_norm": {
                        "title": "Tenc Grad Clip Norm",
                        "type": "number",
                        "default": 0.0
                    },
                    "tomesd": {
                        "title": "Tomesd",
                        "type": "number",
                        "default": 0
                    },
                    "train_batch_size": {
                        "title": "Train Batch Size",
                        "type": "integer",
                        "default": 1
                    },
                    "train_imagic": {
                        "title": "Train Imagic",
                        "type": "boolean",
                        "default": false
                    },
                    "train_unet": {
                        "title": "Train Unet",
                        "type": "boolean",
                        "default": true
                    },
                    "train_unfrozen": {
                        "title": "Train Unfrozen",
                        "type": "boolean",
                        "default": true
                    },
                    "txt_learning_rate": {
                        "title": "Txt Learning Rate",
                        "type": "number",
                        "default": 5E-06
                    },
                    "use_concepts": {
                        "title": "Use Concepts",
                        "type": "boolean",
                        "default": false
                    },
                    "use_ema": {
                        "title": "Use Ema",
                        "type": "boolean",
                        "default": true
                    },
                    "use_lora": {
                        "title": "Use Lora",
                        "type": "boolean",
                        "default": false
                    },
                    "use_lora_extended": {
                        "title": "Use Lora Extended",
                        "type": "boolean",
                        "default": false
                    },
                    "use_shared_src": {
                        "title": "Use Shared Src",
                        "type": "boolean",
                        "default": false
                    },
                    "use_subdir": {
                        "title": "Use Subdir",
                        "type": "boolean",
                        "default": false
                    },
                    "v2": {
                        "title": "V2",
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "EmbeddingItem": {
                "title": "EmbeddingItem",
                "required": [
                    "shape",
                    "vectors"
                ],
                "type": "object",
                "properties": {
                    "step": {
                        "title": "Step",
                        "type": "integer",
                        "description": "The number of steps that were used to train this embedding, if available"
                    },
                    "sd_checkpoint": {
                        "title": "SD Checkpoint",
                        "type": "string",
                        "description": "The hash of the checkpoint this embedding was trained on, if available"
                    },
                    "sd_checkpoint_name": {
                        "title": "SD Checkpoint Name",
                        "type": "string",
                        "description": "The name of the checkpoint this embedding was trained on, if available. Note that this is the name that was used by the trainer; for a stable identifier, use `sd_checkpoint` instead"
                    },
                    "shape": {
                        "title": "Shape",
                        "type": "integer",
                        "description": "The length of each individual vector in the embedding"
                    },
                    "vectors": {
                        "title": "Vectors",
                        "type": "integer",
                        "description": "The number of vectors in the embedding"
                    }
                }
            },
            "EmbeddingsResponse": {
                "title": "EmbeddingsResponse",
                "required": [
                    "loaded",
                    "skipped"
                ],
                "type": "object",
                "properties": {
                    "loaded": {
                        "title": "Loaded",
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/EmbeddingItem"
                        },
                        "description": "Embeddings loaded for the current model"
                    },
                    "skipped": {
                        "title": "Skipped",
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/EmbeddingItem"
                        },
                        "description": "Embeddings skipped for the current model (likely due to architecture incompatibility)"
                    }
                }
            },
            "Estimation": {
                "title": "Estimation",
                "required": [
                    "queue_size",
                    "queue_eta"
                ],
                "type": "object",
                "properties": {
                    "msg": {
                        "title": "Msg",
                        "type": "string",
                        "default": "estimation"
                    },
                    "rank": {
                        "title": "Rank",
                        "type": "integer"
                    },
                    "queue_size": {
                        "title": "Queue Size",
                        "type": "integer"
                    },
                    "avg_event_process_time": {
                        "title": "Avg Event Process Time",
                        "type": "number"
                    },
                    "avg_event_concurrent_process_time": {
                        "title": "Avg Event Concurrent Process Time",
                        "type": "number"
                    },
                    "rank_eta": {
                        "title": "Rank Eta",
                        "type": "number"
                    },
                    "queue_eta": {
                        "title": "Queue Eta",
                        "type": "number"
                    }
                }
            },
            "ExtrasBatchImagesRequest": {
                "title": "ExtrasBatchImagesRequest",
                "required": [
                    "imageList"
                ],
                "type": "object",
                "properties": {
                    "resize_mode": {
                        "title": "Resize Mode",
                        "enum": [
                            0,
                            1
                        ],
                        "type": "integer",
                        "description": "Sets the resize mode: 0 to upscale by upscaling_resize amount, 1 to upscale up to upscaling_resize_h x upscaling_resize_w.",
                        "default": 0
                    },
                    "show_extras_results": {
                        "title": "Show results",
                        "type": "boolean",
                        "description": "Should the backend return the generated image?",
                        "default": true
                    },
                    "gfpgan_visibility": {
                        "title": "GFPGAN Visibility",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "type": "number",
                        "description": "Sets the visibility of GFPGAN, values should be between 0 and 1.",
                        "default": 0
                    },
                    "codeformer_visibility": {
                        "title": "CodeFormer Visibility",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "type": "number",
                        "description": "Sets the visibility of CodeFormer, values should be between 0 and 1.",
                        "default": 0
                    },
                    "codeformer_weight": {
                        "title": "CodeFormer Weight",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "type": "number",
                        "description": "Sets the weight of CodeFormer, values should be between 0 and 1.",
                        "default": 0
                    },
                    "upscaling_resize": {
                        "title": "Upscaling Factor",
                        "maximum": 8.0,
                        "minimum": 1.0,
                        "type": "number",
                        "description": "By how much to upscale the image, only used when resize_mode=0.",
                        "default": 2
                    },
                    "upscaling_resize_w": {
                        "title": "Target Width",
                        "minimum": 1.0,
                        "type": "integer",
                        "description": "Target width for the upscaler to hit. Only used when resize_mode=1.",
                        "default": 512
                    },
                    "upscaling_resize_h": {
                        "title": "Target Height",
                        "minimum": 1.0,
                        "type": "integer",
                        "description": "Target height for the upscaler to hit. Only used when resize_mode=1.",
                        "default": 512
                    },
                    "upscaling_crop": {
                        "title": "Crop to fit",
                        "type": "boolean",
                        "description": "Should the upscaler crop the image to fit in the chosen size?",
                        "default": true
                    },
                    "upscaler_1": {
                        "title": "Main upscaler",
                        "type": "string",
                        "description": "The name of the main upscaler to use, it has to be one of this list: ",
                        "default": "None"
                    },
                    "upscaler_2": {
                        "title": "Secondary upscaler",
                        "type": "string",
                        "description": "The name of the secondary upscaler to use, it has to be one of this list: ",
                        "default": "None"
                    },
                    "extras_upscaler_2_visibility": {
                        "title": "Secondary upscaler visibility",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "type": "number",
                        "description": "Sets the visibility of secondary upscaler, values should be between 0 and 1.",
                        "default": 0
                    },
                    "upscale_first": {
                        "title": "Upscale first",
                        "type": "boolean",
                        "description": "Should the upscaler run before restoring faces?",
                        "default": false
                    },
                    "imageList": {
                        "title": "Images",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FileData"
                        },
                        "description": "List of images to work on. Must be Base64 strings"
                    }
                }
            },
            "ExtrasBatchImagesResponse": {
                "title": "ExtrasBatchImagesResponse",
                "required": [
                    "html_info",
                    "images"
                ],
                "type": "object",
                "properties": {
                    "html_info": {
                        "title": "HTML info",
                        "type": "string",
                        "description": "A series of HTML tags containing the process info."
                    },
                    "images": {
                        "title": "Images",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The generated images in base64 format."
                    }
                }
            },
            "ExtrasSingleImageRequest": {
                "title": "ExtrasSingleImageRequest",
                "type": "object",
                "properties": {
                    "resize_mode": {
                        "title": "Resize Mode",
                        "enum": [
                            0,
                            1
                        ],
                        "type": "integer",
                        "description": "Sets the resize mode: 0 to upscale by upscaling_resize amount, 1 to upscale up to upscaling_resize_h x upscaling_resize_w.",
                        "default": 0
                    },
                    "show_extras_results": {
                        "title": "Show results",
                        "type": "boolean",
                        "description": "Should the backend return the generated image?",
                        "default": true
                    },
                    "gfpgan_visibility": {
                        "title": "GFPGAN Visibility",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "type": "number",
                        "description": "Sets the visibility of GFPGAN, values should be between 0 and 1.",
                        "default": 0
                    },
                    "codeformer_visibility": {
                        "title": "CodeFormer Visibility",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "type": "number",
                        "description": "Sets the visibility of CodeFormer, values should be between 0 and 1.",
                        "default": 0
                    },
                    "codeformer_weight": {
                        "title": "CodeFormer Weight",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "type": "number",
                        "description": "Sets the weight of CodeFormer, values should be between 0 and 1.",
                        "default": 0
                    },
                    "upscaling_resize": {
                        "title": "Upscaling Factor",
                        "maximum": 8.0,
                        "minimum": 1.0,
                        "type": "number",
                        "description": "By how much to upscale the image, only used when resize_mode=0.",
                        "default": 2
                    },
                    "upscaling_resize_w": {
                        "title": "Target Width",
                        "minimum": 1.0,
                        "type": "integer",
                        "description": "Target width for the upscaler to hit. Only used when resize_mode=1.",
                        "default": 512
                    },
                    "upscaling_resize_h": {
                        "title": "Target Height",
                        "minimum": 1.0,
                        "type": "integer",
                        "description": "Target height for the upscaler to hit. Only used when resize_mode=1.",
                        "default": 512
                    },
                    "upscaling_crop": {
                        "title": "Crop to fit",
                        "type": "boolean",
                        "description": "Should the upscaler crop the image to fit in the chosen size?",
                        "default": true
                    },
                    "upscaler_1": {
                        "title": "Main upscaler",
                        "type": "string",
                        "description": "The name of the main upscaler to use, it has to be one of this list: ",
                        "default": "None"
                    },
                    "upscaler_2": {
                        "title": "Secondary upscaler",
                        "type": "string",
                        "description": "The name of the secondary upscaler to use, it has to be one of this list: ",
                        "default": "None"
                    },
                    "extras_upscaler_2_visibility": {
                        "title": "Secondary upscaler visibility",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "type": "number",
                        "description": "Sets the visibility of secondary upscaler, values should be between 0 and 1.",
                        "default": 0
                    },
                    "upscale_first": {
                        "title": "Upscale first",
                        "type": "boolean",
                        "description": "Should the upscaler run before restoring faces?",
                        "default": false
                    },
                    "image": {
                        "title": "Image",
                        "type": "string",
                        "description": "Image to work on, must be a Base64 string containing the image's data.",
                        "default": ""
                    }
                }
            },
            "ExtrasSingleImageResponse": {
                "title": "ExtrasSingleImageResponse",
                "required": [
                    "html_info"
                ],
                "type": "object",
                "properties": {
                    "html_info": {
                        "title": "HTML info",
                        "type": "string",
                        "description": "A series of HTML tags containing the process info."
                    },
                    "image": {
                        "title": "Image",
                        "type": "string",
                        "description": "The generated image in base64 format."
                    }
                }
            },
            "FaceRestorerItem": {
                "title": "FaceRestorerItem",
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string"
                    },
                    "cmd_dir": {
                        "title": "Path",
                        "type": "string"
                    }
                }
            },
            "FileData": {
                "title": "FileData",
                "required": [
                    "data",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "data": {
                        "title": "File data",
                        "type": "string",
                        "description": "Base64 representation of the file"
                    },
                    "name": {
                        "title": "File name",
                        "type": "string"
                    }
                }
            },
            "Flags": {
                "title": "Flags",
                "type": "object",
                "properties": {
                    "f": {
                        "title": "F",
                        "type": "boolean",
                        "description": "==SUPPRESS==",
                        "default": false
                    },
                    "update_all_extensions": {
                        "title": "Update All Extensions",
                        "type": "boolean",
                        "description": "launch.py argument: download updates for all extensions when starting the program",
                        "default": false
                    },
                    "skip_python_version_check": {
                        "title": "Skip Python Version Check",
                        "type": "boolean",
                        "description": "launch.py argument: do not check python version",
                        "default": false
                    },
                    "skip_torch_cuda_test": {
                        "title": "Skip Torch Cuda Test",
                        "type": "boolean",
                        "description": "launch.py argument: do not check if CUDA is able to work properly",
                        "default": false
                    },
                    "reinstall_xformers": {
                        "title": "Reinstall Xformers",
                        "type": "boolean",
                        "description": "launch.py argument: install the appropriate version of xformers even if you have some version already installed",
                        "default": false
                    },
                    "reinstall_torch": {
                        "title": "Reinstall Torch",
                        "type": "boolean",
                        "description": "launch.py argument: install the appropriate version of torch even if you have some version already installed",
                        "default": false
                    },
                    "update_check": {
                        "title": "Update Check",
                        "type": "boolean",
                        "description": "launch.py argument: check for updates at startup",
                        "default": false
                    },
                    "test_server": {
                        "title": "Test Server",
                        "type": "boolean",
                        "description": "launch.py argument: configure server for testing",
                        "default": false
                    },
                    "log_startup": {
                        "title": "Log Startup",
                        "type": "boolean",
                        "description": "launch.py argument: print a detailed log of what's happening at startup",
                        "default": false
                    },
                    "skip_prepare_environment": {
                        "title": "Skip Prepare Environment",
                        "type": "boolean",
                        "description": "launch.py argument: skip all environment preparation",
                        "default": false
                    },
                    "skip_install": {
                        "title": "Skip Install",
                        "type": "boolean",
                        "description": "launch.py argument: skip installation of packages",
                        "default": false
                    },
                    "dump_sysinfo": {
                        "title": "Dump Sysinfo",
                        "type": "boolean",
                        "description": "launch.py argument: dump limited sysinfo file (without information about extensions, options) to disk and quit",
                        "default": false
                    },
                    "loglevel": {
                        "title": "Loglevel",
                        "type": "string",
                        "description": "log level; one of: CRITICAL, ERROR, WARNING, INFO, DEBUG"
                    },
                    "do_not_download_clip": {
                        "title": "Do Not Download Clip",
                        "type": "boolean",
                        "description": "do not download CLIP model even if it's not included in the checkpoint",
                        "default": false
                    },
                    "data_dir": {
                        "title": "Data Dir",
                        "type": "string",
                        "description": "base path where all user data is stored",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui"
                    },
                    "config": {
                        "title": "Config",
                        "type": "string",
                        "description": "path to config which constructs model",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\configs\\v1-inference.yaml"
                    },
                    "ckpt": {
                        "title": "Ckpt",
                        "type": "string",
                        "description": "path to checkpoint of stable diffusion model; if specified, this checkpoint will be added to the list of checkpoints and loaded",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\model.ckpt"
                    },
                    "ckpt_dir": {
                        "title": "Ckpt Dir",
                        "type": "string",
                        "description": "Path to directory with stable diffusion checkpoints"
                    },
                    "vae_dir": {
                        "title": "Vae Dir",
                        "type": "string",
                        "description": "Path to directory with VAE files"
                    },
                    "gfpgan_dir": {
                        "title": "Gfpgan Dir",
                        "type": "string",
                        "description": "GFPGAN directory",
                        "default": "./GFPGAN"
                    },
                    "gfpgan_model": {
                        "title": "Gfpgan Model",
                        "type": "string",
                        "description": "GFPGAN model file name"
                    },
                    "no_half": {
                        "title": "No Half",
                        "type": "boolean",
                        "description": "do not switch the model to 16-bit floats",
                        "default": false
                    },
                    "no_half_vae": {
                        "title": "No Half Vae",
                        "type": "boolean",
                        "description": "do not switch the VAE model to 16-bit floats",
                        "default": false
                    },
                    "no_progressbar_hiding": {
                        "title": "No Progressbar Hiding",
                        "type": "boolean",
                        "description": "do not hide progressbar in gradio UI (we hide it because it slows down ML if you have hardware acceleration in browser)",
                        "default": false
                    },
                    "max_batch_count": {
                        "title": "Max Batch Count",
                        "type": "integer",
                        "description": "maximum batch count value for the UI",
                        "default": 16
                    },
                    "embeddings_dir": {
                        "title": "Embeddings Dir",
                        "type": "string",
                        "description": "embeddings directory for textual inversion (default: embeddings)",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\embeddings"
                    },
                    "textual_inversion_templates_dir": {
                        "title": "Textual Inversion Templates Dir",
                        "type": "string",
                        "description": "directory with textual inversion templates",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\textual_inversion_templates"
                    },
                    "hypernetwork_dir": {
                        "title": "Hypernetwork Dir",
                        "type": "string",
                        "description": "hypernetwork directory",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\models\\hypernetworks"
                    },
                    "localizations_dir": {
                        "title": "Localizations Dir",
                        "type": "string",
                        "description": "localizations directory",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\localizations"
                    },
                    "allow_code": {
                        "title": "Allow Code",
                        "type": "boolean",
                        "description": "allow custom script execution from webui",
                        "default": false
                    },
                    "medvram": {
                        "title": "Medvram",
                        "type": "boolean",
                        "description": "enable stable diffusion model optimizations for sacrificing a little speed for low VRM usage",
                        "default": false
                    },
                    "medvram_sdxl": {
                        "title": "Medvram Sdxl",
                        "type": "boolean",
                        "description": "enable --medvram optimization just for SDXL models",
                        "default": false
                    },
                    "lowvram": {
                        "title": "Lowvram",
                        "type": "boolean",
                        "description": "enable stable diffusion model optimizations for sacrificing a lot of speed for very low VRM usage",
                        "default": false
                    },
                    "lowram": {
                        "title": "Lowram",
                        "type": "boolean",
                        "description": "load stable diffusion checkpoint weights to VRAM instead of RAM",
                        "default": false
                    },
                    "always_batch_cond_uncond": {
                        "title": "Always Batch Cond Uncond",
                        "type": "boolean",
                        "description": "does not do anything",
                        "default": false
                    },
                    "unload_gfpgan": {
                        "title": "Unload Gfpgan",
                        "type": "boolean",
                        "description": "does not do anything.",
                        "default": false
                    },
                    "precision": {
                        "title": "Precision",
                        "type": "string",
                        "description": "evaluate at this precision",
                        "default": "autocast"
                    },
                    "upcast_sampling": {
                        "title": "Upcast Sampling",
                        "type": "boolean",
                        "description": "upcast sampling. No effect with --no-half. Usually produces similar results to --no-half with better performance while using less memory.",
                        "default": false
                    },
                    "share": {
                        "title": "Share",
                        "type": "boolean",
                        "description": "use share=True for gradio and make the UI accessible through their site",
                        "default": false
                    },
                    "ngrok": {
                        "title": "Ngrok",
                        "type": "string",
                        "description": "ngrok authtoken, alternative to gradio --share"
                    },
                    "ngrok_region": {
                        "title": "Ngrok Region",
                        "type": "string",
                        "description": "does not do anything.",
                        "default": ""
                    },
                    "ngrok_options": {
                        "title": "Ngrok Options",
                        "type": "object",
                        "description": "The options to pass to ngrok in JSON format, e.g.: '{\"authtoken_from_env\":true, \"basic_auth\":\"user:password\", \"oauth_provider\":\"google\", \"oauth_allow_emails\":\"user@asdf.com\"}'",
                        "default": {}
                    },
                    "enable_insecure_extension_access": {
                        "title": "Enable Insecure Extension Access",
                        "type": "boolean",
                        "description": "enable extensions tab regardless of other options",
                        "default": false
                    },
                    "codeformer_models_path": {
                        "title": "Codeformer Models Path",
                        "type": "string",
                        "description": "Path to directory with codeformer model file(s).",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\models\\Codeformer"
                    },
                    "gfpgan_models_path": {
                        "title": "Gfpgan Models Path",
                        "type": "string",
                        "description": "Path to directory with GFPGAN model file(s).",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\models\\GFPGAN"
                    },
                    "esrgan_models_path": {
                        "title": "Esrgan Models Path",
                        "type": "string",
                        "description": "Path to directory with ESRGAN model file(s).",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\models\\ESRGAN"
                    },
                    "bsrgan_models_path": {
                        "title": "Bsrgan Models Path",
                        "type": "string",
                        "description": "Path to directory with BSRGAN model file(s).",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\models\\BSRGAN"
                    },
                    "realesrgan_models_path": {
                        "title": "Realesrgan Models Path",
                        "type": "string",
                        "description": "Path to directory with RealESRGAN model file(s).",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\models\\RealESRGAN"
                    },
                    "clip_models_path": {
                        "title": "Clip Models Path",
                        "type": "string",
                        "description": "Path to directory with CLIP model file(s)."
                    },
                    "xformers": {
                        "title": "Xformers",
                        "type": "boolean",
                        "description": "enable xformers for cross attention layers",
                        "default": false
                    },
                    "force_enable_xformers": {
                        "title": "Force Enable Xformers",
                        "type": "boolean",
                        "description": "enable xformers for cross attention layers regardless of whether the checking code thinks you can run it; do not make bug reports if this fails to work",
                        "default": false
                    },
                    "xformers_flash_attention": {
                        "title": "Xformers Flash Attention",
                        "type": "boolean",
                        "description": "enable xformers with Flash Attention to improve reproducibility (supported for SD2.x or variant only)",
                        "default": false
                    },
                    "deepdanbooru": {
                        "title": "Deepdanbooru",
                        "type": "boolean",
                        "description": "does not do anything",
                        "default": false
                    },
                    "opt_split_attention": {
                        "title": "Opt Split Attention",
                        "type": "boolean",
                        "description": "prefer Doggettx's cross-attention layer optimization for automatic choice of optimization",
                        "default": false
                    },
                    "opt_sub_quad_attention": {
                        "title": "Opt Sub Quad Attention",
                        "type": "boolean",
                        "description": "prefer memory efficient sub-quadratic cross-attention layer optimization for automatic choice of optimization",
                        "default": false
                    },
                    "sub_quad_q_chunk_size": {
                        "title": "Sub Quad Q Chunk Size",
                        "type": "integer",
                        "description": "query chunk size for the sub-quadratic cross-attention layer optimization to use",
                        "default": 1024
                    },
                    "sub_quad_kv_chunk_size": {
                        "title": "Sub Quad Kv Chunk Size",
                        "type": "string",
                        "description": "kv chunk size for the sub-quadratic cross-attention layer optimization to use"
                    },
                    "sub_quad_chunk_threshold": {
                        "title": "Sub Quad Chunk Threshold",
                        "type": "string",
                        "description": "the percentage of VRAM threshold for the sub-quadratic cross-attention layer optimization to use chunking"
                    },
                    "opt_split_attention_invokeai": {
                        "title": "Opt Split Attention Invokeai",
                        "type": "boolean",
                        "description": "prefer InvokeAI's cross-attention layer optimization for automatic choice of optimization",
                        "default": false
                    },
                    "opt_split_attention_v1": {
                        "title": "Opt Split Attention V1",
                        "type": "boolean",
                        "description": "prefer older version of split attention optimization for automatic choice of optimization",
                        "default": false
                    },
                    "opt_sdp_attention": {
                        "title": "Opt Sdp Attention",
                        "type": "boolean",
                        "description": "prefer scaled dot product cross-attention layer optimization for automatic choice of optimization; requires PyTorch 2.*",
                        "default": false
                    },
                    "opt_sdp_no_mem_attention": {
                        "title": "Opt Sdp No Mem Attention",
                        "type": "boolean",
                        "description": "prefer scaled dot product cross-attention layer optimization without memory efficient attention for automatic choice of optimization, makes image generation deterministic; requires PyTorch 2.*",
                        "default": false
                    },
                    "disable_opt_split_attention": {
                        "title": "Disable Opt Split Attention",
                        "type": "boolean",
                        "description": "prefer no cross-attention layer optimization for automatic choice of optimization",
                        "default": false
                    },
                    "disable_nan_check": {
                        "title": "Disable Nan Check",
                        "type": "boolean",
                        "description": "do not check if produced images/latent spaces have nans; useful for running without a checkpoint in CI",
                        "default": false
                    },
                    "use_cpu": {
                        "title": "Use Cpu",
                        "type": "array",
                        "items": {},
                        "description": "use CPU as torch device for specified modules",
                        "default": []
                    },
                    "disable_model_loading_ram_optimization": {
                        "title": "Disable Model Loading Ram Optimization",
                        "type": "boolean",
                        "description": "disable an optimization that reduces RAM use when loading a model",
                        "default": false
                    },
                    "listen": {
                        "title": "Listen",
                        "type": "boolean",
                        "description": "launch gradio with 0.0.0.0 as server name, allowing to respond to network requests",
                        "default": false
                    },
                    "port": {
                        "title": "Port",
                        "type": "string",
                        "description": "launch gradio with given server port, you need root/admin rights for ports < 1024, defaults to 7860 if available"
                    },
                    "show_negative_prompt": {
                        "title": "Show Negative Prompt",
                        "type": "boolean",
                        "description": "does not do anything",
                        "default": false
                    },
                    "ui_config_file": {
                        "title": "Ui Config File",
                        "type": "string",
                        "description": "filename to use for ui configuration",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\ui-config.json"
                    },
                    "hide_ui_dir_config": {
                        "title": "Hide Ui Dir Config",
                        "type": "boolean",
                        "description": "hide directory configuration from webui",
                        "default": false
                    },
                    "freeze_settings": {
                        "title": "Freeze Settings",
                        "type": "boolean",
                        "description": "disable editing settings",
                        "default": false
                    },
                    "ui_settings_file": {
                        "title": "Ui Settings File",
                        "type": "string",
                        "description": "filename to use for ui settings",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\config.json"
                    },
                    "gradio_debug": {
                        "title": "Gradio Debug",
                        "type": "boolean",
                        "description": "launch gradio with --debug option",
                        "default": false
                    },
                    "gradio_auth": {
                        "title": "Gradio Auth",
                        "type": "string",
                        "description": "set gradio authentication like \"username:password\"; or comma-delimit multiple like \"u1:p1,u2:p2,u3:p3\""
                    },
                    "gradio_auth_path": {
                        "title": "Gradio Auth Path",
                        "type": "string",
                        "description": "set gradio authentication file path ex. \"/path/to/auth/file\" same auth format as --gradio-auth"
                    },
                    "gradio_img2img_tool": {
                        "title": "Gradio Img2Img Tool",
                        "type": "string",
                        "description": "does not do anything"
                    },
                    "gradio_inpaint_tool": {
                        "title": "Gradio Inpaint Tool",
                        "type": "string",
                        "description": "does not do anything"
                    },
                    "gradio_allowed_path": {
                        "title": "Gradio Allowed Path",
                        "type": "array",
                        "items": {},
                        "description": "add path to gradio's allowed_paths, make it possible to serve files from it",
                        "default": [
                            "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui"
                        ]
                    },
                    "opt_channelslast": {
                        "title": "Opt Channelslast",
                        "type": "boolean",
                        "description": "change memory type for stable diffusion to channels last",
                        "default": false
                    },
                    "styles_file": {
                        "title": "Styles File",
                        "type": "string",
                        "description": "filename to use for styles",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\styles.csv"
                    },
                    "autolaunch": {
                        "title": "Autolaunch",
                        "type": "boolean",
                        "description": "open the webui URL in the system's default browser upon launch",
                        "default": false
                    },
                    "theme": {
                        "title": "Theme",
                        "type": "string",
                        "description": "launches the UI with light or dark theme"
                    },
                    "use_textbox_seed": {
                        "title": "Use Textbox Seed",
                        "type": "boolean",
                        "description": "use textbox for seeds in UI (no up/down, but possible to input long seeds)",
                        "default": false
                    },
                    "disable_console_progressbars": {
                        "title": "Disable Console Progressbars",
                        "type": "boolean",
                        "description": "do not output progressbars to console",
                        "default": false
                    },
                    "enable_console_prompts": {
                        "title": "Enable Console Prompts",
                        "type": "boolean",
                        "description": "print prompts to console when generating with txt2img and img2img",
                        "default": false
                    },
                    "vae_path": {
                        "title": "Vae Path",
                        "type": "string",
                        "description": "Checkpoint to use as VAE; setting this argument disables all settings related to VAE"
                    },
                    "disable_safe_unpickle": {
                        "title": "Disable Safe Unpickle",
                        "type": "boolean",
                        "description": "disable checking pytorch models for malicious code",
                        "default": false
                    },
                    "api": {
                        "title": "Api",
                        "type": "boolean",
                        "description": "use api=True to launch the API together with the webui (use --nowebui instead for only the API)",
                        "default": false
                    },
                    "api_auth": {
                        "title": "Api Auth",
                        "type": "string",
                        "description": "Set authentication for API like \"username:password\"; or comma-delimit multiple like \"u1:p1,u2:p2,u3:p3\""
                    },
                    "api_log": {
                        "title": "Api Log",
                        "type": "boolean",
                        "description": "use api-log=True to enable logging of all API requests",
                        "default": false
                    },
                    "nowebui": {
                        "title": "Nowebui",
                        "type": "boolean",
                        "description": "use api=True to launch the API instead of the webui",
                        "default": false
                    },
                    "ui_debug_mode": {
                        "title": "Ui Debug Mode",
                        "type": "boolean",
                        "description": "Don't load model to quickly launch UI",
                        "default": false
                    },
                    "device_id": {
                        "title": "Device Id",
                        "type": "string",
                        "description": "Select the default CUDA device to use (export CUDA_VISIBLE_DEVICES=0,1,etc might be needed before)"
                    },
                    "administrator": {
                        "title": "Administrator",
                        "type": "boolean",
                        "description": "Administrator rights",
                        "default": false
                    },
                    "cors_allow_origins": {
                        "title": "Cors Allow Origins",
                        "type": "string",
                        "description": "Allowed CORS origin(s) in the form of a comma-separated list (no spaces)"
                    },
                    "cors_allow_origins_regex": {
                        "title": "Cors Allow Origins Regex",
                        "type": "string",
                        "description": "Allowed CORS origin(s) in the form of a single regular expression"
                    },
                    "tls_keyfile": {
                        "title": "Tls Keyfile",
                        "type": "string",
                        "description": "Partially enables TLS, requires --tls-certfile to fully function"
                    },
                    "tls_certfile": {
                        "title": "Tls Certfile",
                        "type": "string",
                        "description": "Partially enables TLS, requires --tls-keyfile to fully function"
                    },
                    "disable_tls_verify": {
                        "title": "Disable Tls Verify",
                        "type": "string",
                        "description": "When passed, enables the use of self-signed certificates."
                    },
                    "server_name": {
                        "title": "Server Name",
                        "type": "string",
                        "description": "Sets hostname of server"
                    },
                    "gradio_queue": {
                        "title": "Gradio Queue",
                        "type": "boolean",
                        "description": "does not do anything",
                        "default": true
                    },
                    "no_gradio_queue": {
                        "title": "No Gradio Queue",
                        "type": "boolean",
                        "description": "Disables gradio queue; causes the webpage to use http requests instead of websockets; was the defaul in earlier versions",
                        "default": false
                    },
                    "skip_version_check": {
                        "title": "Skip Version Check",
                        "type": "boolean",
                        "description": "Do not check versions of torch and xformers",
                        "default": false
                    },
                    "no_hashing": {
                        "title": "No Hashing",
                        "type": "boolean",
                        "description": "disable sha256 hashing of checkpoints to help loading performance",
                        "default": false
                    },
                    "no_download_sd_model": {
                        "title": "No Download Sd Model",
                        "type": "boolean",
                        "description": "don't download SD1.5 model even if no model is found in --ckpt-dir",
                        "default": false
                    },
                    "subpath": {
                        "title": "Subpath",
                        "type": "string",
                        "description": "customize the subpath for gradio, use with reverse proxy"
                    },
                    "add_stop_route": {
                        "title": "Add Stop Route",
                        "type": "boolean",
                        "description": "add /_stop route to stop server",
                        "default": false
                    },
                    "api_server_stop": {
                        "title": "Api Server Stop",
                        "type": "boolean",
                        "description": "enable server stop/restart/kill via api",
                        "default": false
                    },
                    "timeout_keep_alive": {
                        "title": "Timeout Keep Alive",
                        "type": "integer",
                        "description": "set timeout_keep_alive for uvicorn",
                        "default": 30
                    },
                    "disable_all_extensions": {
                        "title": "Disable All Extensions",
                        "type": "boolean",
                        "description": "prevent all extensions from running regardless of any other settings",
                        "default": false
                    },
                    "disable_extra_extensions": {
                        "title": "Disable Extra Extensions",
                        "type": "boolean",
                        "description": " prevent all extensions except built-in from running regardless of any other settings",
                        "default": false
                    },
                    "lyco_dir": {
                        "title": "Lyco Dir",
                        "type": "string",
                        "description": "Path to directory with LyCORIS networks.",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\models\\LyCORIS"
                    },
                    "lyco_patch_lora": {
                        "title": "Lyco Patch Lora",
                        "type": "boolean",
                        "description": "Patch the built-in lora. Will use the lora_dir and <lora> format, but disable the <lyco> format.",
                        "default": false
                    },
                    "lyco_debug": {
                        "title": "Lyco Debug",
                        "type": "boolean",
                        "description": "Print extra info when using lycoris model",
                        "default": false
                    },
                    "controlnet_dir": {
                        "title": "Controlnet Dir",
                        "type": "string",
                        "description": "Path to directory with ControlNet models"
                    },
                    "controlnet_annotator_models_path": {
                        "title": "Controlnet Annotator Models Path",
                        "type": "string",
                        "description": "Path to directory with annotator model directories"
                    },
                    "no_half_controlnet": {
                        "title": "No Half Controlnet",
                        "type": "string",
                        "description": "do not switch the ControlNet models to 16-bit floats (only needed without --no-half)"
                    },
                    "controlnet_preprocessor_cache_size": {
                        "title": "Controlnet Preprocessor Cache Size",
                        "type": "integer",
                        "description": "Cache size for controlnet preprocessor results",
                        "default": 16
                    },
                    "controlnet_loglevel": {
                        "title": "Controlnet Loglevel",
                        "type": "string",
                        "description": "Set the log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)",
                        "default": "INFO"
                    },
                    "dreambooth_models_path": {
                        "title": "Dreambooth Models Path",
                        "type": "string",
                        "description": "Path to directory to store Dreambooth model file(s)."
                    },
                    "lora_models_path": {
                        "title": "Lora Models Path",
                        "type": "string",
                        "description": "Path to directory to store Lora model file(s)."
                    },
                    "ckptfix": {
                        "title": "Ckptfix",
                        "type": "boolean",
                        "description": "(Dreambooth) Enable fix for OOM errors when extracting checkpoints.",
                        "default": false
                    },
                    "force_cpu": {
                        "title": "Force Cpu",
                        "type": "boolean",
                        "description": "(Dreambooth) Train using CPU only.",
                        "default": false
                    },
                    "profile_db": {
                        "title": "Profile Db",
                        "type": "boolean",
                        "description": "Set this to enable memory profiling while training. For science only.",
                        "default": false
                    },
                    "debug_db": {
                        "title": "Debug Db",
                        "type": "boolean",
                        "description": "Set this to enable memory logging. For science only.",
                        "default": false
                    },
                    "image_browser_tmp_db": {
                        "title": "Image Browser Tmp Db",
                        "type": "boolean",
                        "description": "Copy database file to and from /tmp when transacting (workaround for filesystems sqlite does not support)",
                        "default": false
                    },
                    "ldsr_models_path": {
                        "title": "Ldsr Models Path",
                        "type": "string",
                        "description": "Path to directory with LDSR model file(s).",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\models\\LDSR"
                    },
                    "lora_dir": {
                        "title": "Lora Dir",
                        "type": "string",
                        "description": "Path to directory with Lora networks.",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\models\\Lora"
                    },
                    "lyco_dir_backcompat": {
                        "title": "Lyco Dir Backcompat",
                        "type": "string",
                        "description": "Path to directory with LyCORIS networks (for backawards compatibility; can also use --lyco-dir).",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\models\\LyCORIS"
                    },
                    "scunet_models_path": {
                        "title": "Scunet Models Path",
                        "type": "string",
                        "description": "Path to directory with ScuNET model file(s).",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\models\\ScuNET"
                    },
                    "swinir_models_path": {
                        "title": "Swinir Models Path",
                        "type": "string",
                        "description": "Path to directory with SwinIR model file(s).",
                        "default": "C:\\Docker\\Compose\\stablediffusion\\stable-diffusion-webui\\models\\SwinIR"
                    }
                }
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            },
            "HypernetworkItem": {
                "title": "HypernetworkItem",
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string"
                    },
                    "path": {
                        "title": "Path",
                        "type": "string"
                    }
                }
            },
            "ImageToImageResponse": {
                "title": "ImageToImageResponse",
                "required": [
                    "parameters",
                    "info"
                ],
                "type": "object",
                "properties": {
                    "images": {
                        "title": "Image",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The generated image in base64 format."
                    },
                    "parameters": {
                        "title": "Parameters",
                        "type": "object"
                    },
                    "info": {
                        "title": "Info",
                        "type": "string"
                    }
                }
            },
            "InstanceData": {
                "title": "InstanceData",
                "required": [
                    "data",
                    "name",
                    "txt"
                ],
                "type": "object",
                "properties": {
                    "data": {
                        "title": "File data",
                        "type": "string",
                        "description": "Base64 representation of the file or URL"
                    },
                    "name": {
                        "title": "File name",
                        "type": "string",
                        "description": "File name to save image as"
                    },
                    "txt": {
                        "title": "Prompt",
                        "type": "string",
                        "description": "Training prompt for image"
                    }
                }
            },
            "InterrogateRequest": {
                "title": "InterrogateRequest",
                "type": "object",
                "properties": {
                    "image": {
                        "title": "Image",
                        "type": "string",
                        "description": "Image to work on, must be a Base64 string containing the image's data.",
                        "default": ""
                    },
                    "model": {
                        "title": "Model",
                        "type": "string",
                        "description": "The interrogate model used.",
                        "default": "clip"
                    }
                }
            },
            "LatentUpscalerModeItem": {
                "title": "LatentUpscalerModeItem",
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string"
                    }
                }
            },
            "MemoryResponse": {
                "title": "MemoryResponse",
                "required": [
                    "ram",
                    "cuda"
                ],
                "type": "object",
                "properties": {
                    "ram": {
                        "title": "RAM",
                        "type": "object",
                        "description": "System memory stats"
                    },
                    "cuda": {
                        "title": "CUDA",
                        "type": "object",
                        "description": "nVidia CUDA memory stats"
                    }
                }
            },
            "Options": {
                "title": "Options",
                "type": "object",
                "properties": {
                    "samples_save": {
                        "title": "Samples Save",
                        "type": "boolean",
                        "description": "Always save all generated images",
                    },
                    "samples_format": {
                        "title": "Samples Format",
                        "type": "string",
                        "description": "File format for images",
                    },
                    "samples_filename_pattern": {
                        "title": "Samples Filename Pattern",
                        "description": "Images filename pattern",
                    },
                    "save_images_add_number": {
                        "title": "Save Images Add Number",
                        "type": "boolean",
                        "description": "Add number to filename when saving",
                    },
                    "grid_save": {
                        "title": "Grid Save",
                        "type": "boolean",
                        "description": "Always save all generated image grids",
                    },
                    "grid_format": {
                        "title": "Grid Format",
                        "type": "string",
                        "description": "File format for grids",
                    },
                    "grid_extended_filename": {
                        "title": "Grid Extended Filename",
                        "description": "Add extended info (seed, prompt) to filename when saving grid",
                    },
                    "grid_only_if_multiple": {
                        "title": "Grid Only If Multiple",
                        "type": "boolean",
                        "description": "Do not save grids consisting of one picture",
                    },
                    "grid_prevent_empty_spots": {
                        "title": "Grid Prevent Empty Spots",
                        "description": "Prevent empty spots in grid (when set to autodetect)",
                    },
                    "grid_zip_filename_pattern": {
                        "title": "Grid Zip Filename Pattern",
                        "description": "Archive filename pattern",
                    },
                    "n_rows": {
                        "title": "N Rows",
                        "type": "number",
                        "description": "Grid row count; use -1 for autodetect and 0 for it to be same as batch size",
                    },
                    "font": {
                        "title": "Font",
                        "description": "Font for image grids that have text",
                    },
                    "grid_text_active_color": {
                        "title": "Grid Text Active Color",
                        "type": "string",
                        "description": "Text color for image grids",
                    },
                    "grid_text_inactive_color": {
                        "title": "Grid Text Inactive Color",
                        "type": "string",
                        "description": "Inactive text color for image grids",
                    },
                    "grid_background_color": {
                        "title": "Grid Background Color",
                        "type": "string",
                        "description": "Background color for image grids",
                    },
                    "enable_pnginfo": {
                        "title": "Enable Pnginfo",
                        "type": "boolean",
                        "description": "Save text information about generation parameters as chunks to png files",
                    },
                    "save_txt": {
                        "title": "Save Txt",
                        "description": "Create a text file next to every image with generation parameters.",
                    },
                    "save_images_before_face_restoration": {
                        "title": "Save Images Before Face Restoration",
                        "description": "Save a copy of image before doing face restoration.",
                    },
                    "save_images_before_highres_fix": {
                        "title": "Save Images Before Highres Fix",
                        "description": "Save a copy of image before applying highres fix.",
                    },
                    "save_images_before_color_correction": {
                        "title": "Save Images Before Color Correction",
                        "description": "Save a copy of image before applying color correction to img2img results",
                    },
                    "save_mask": {
                        "title": "Save Mask",
                        "description": "For inpainting, save a copy of the greyscale mask",
                    },
                    "save_mask_composite": {
                        "title": "Save Mask Composite",
                        "description": "For inpainting, save a masked composite",
                    },
                    "jpeg_quality": {
                        "title": "Jpeg Quality",
                        "type": "number",
                        "description": "Quality for saved jpeg images",
                    },
                    "webp_lossless": {
                        "title": "Webp Lossless",
                        "description": "Use lossless compression for webp images",
                    },
                    "export_for_4chan": {
                        "title": "Export For 4Chan",
                        "type": "boolean",
                        "description": "Save copy of large images as JPG",
                    },
                    "img_downscale_threshold": {
                        "title": "Img Downscale Threshold",
                        "type": "number",
                        "description": "File size limit for the above option, MB",
                    },
                    "target_side_length": {
                        "title": "Target Side Length",
                        "type": "number",
                        "description": "Width/height limit for the above option, in pixels",
                    },
                    "img_max_size_mp": {
                        "title": "Img Max Size Mp",
                        "type": "number",
                        "description": "Maximum image size",
                    },
                    "use_original_name_batch": {
                        "title": "Use Original Name Batch",
                        "type": "boolean",
                        "description": "Use original name for output filename during batch process in extras tab",
                    },
                    "use_upscaler_name_as_suffix": {
                        "title": "Use Upscaler Name As Suffix",
                        "description": "Use upscaler name as filename suffix in the extras tab",
                    },
                    "save_selected_only": {
                        "title": "Save Selected Only",
                        "type": "boolean",
                        "description": "When using 'Save' button, only save a single selected image",
                    },
                    "save_init_img": {
                        "title": "Save Init Img",
                        "description": "Save init images when using img2img",
                    },
                    "temp_dir": {
                        "title": "Temp Dir",
                        "description": "Directory for temporary images; leave empty for default",
                    },
                    "clean_temp_dir_at_start": {
                        "title": "Clean Temp Dir At Start",
                        "description": "Cleanup non-default temporary directory when starting webui",
                    },
                    "save_incomplete_images": {
                        "title": "Save Incomplete Images",
                        "description": "Save incomplete images",
                    },
                    "outdir_samples": {
                        "title": "Outdir Samples",
                        "description": "Output directory for images; if empty, defaults to three directories below",
                    },
                    "outdir_txt2img_samples": {
                        "title": "Outdir Txt2Img Samples",
                        "type": "string",
                        "description": "Output directory for txt2img images",
                    },
                    "outdir_img2img_samples": {
                        "title": "Outdir Img2Img Samples",
                        "type": "string",
                        "description": "Output directory for img2img images",
                    },
                    "outdir_extras_samples": {
                        "title": "Outdir Extras Samples",
                        "type": "string",
                        "description": "Output directory for images from extras tab",
                    },
                    "outdir_grids": {
                        "title": "Outdir Grids",
                        "description": "Output directory for grids; if empty, defaults to two directories below",
                    },
                    "outdir_txt2img_grids": {
                        "title": "Outdir Txt2Img Grids",
                        "type": "string",
                        "description": "Output directory for txt2img grids",
                    },
                    "outdir_img2img_grids": {
                        "title": "Outdir Img2Img Grids",
                        "type": "string",
                        "description": "Output directory for img2img grids",
                    },
                    "outdir_save": {
                        "title": "Outdir Save",
                        "type": "string",
                        "description": "Directory for saving images using the Save button",
                    },
                    "outdir_init_images": {
                        "title": "Outdir Init Images",
                        "type": "string",
                        "description": "Directory for saving init images when using img2img",
                    },
                    "save_to_dirs": {
                        "title": "Save To Dirs",
                        "type": "boolean",
                        "description": "Save images to a subdirectory",
                    },
                    "grid_save_to_dirs": {
                        "title": "Grid Save To Dirs",
                        "type": "boolean",
                        "description": "Save grids to a subdirectory",
                    },
                    "use_save_to_dirs_for_ui": {
                        "title": "Use Save To Dirs For Ui",
                        "description": "When using \"Save\" button, save images to a subdirectory",
                    },
                    "directories_filename_pattern": {
                        "title": "Directories Filename Pattern",
                        "type": "string",
                        "description": "Directory name pattern",
                    },
                    "directories_max_prompt_words": {
                        "title": "Directories Max Prompt Words",
                        "type": "number",
                        "description": "Max prompt words for [prompt_words] pattern",
                    },
                    "ESRGAN_tile": {
                        "title": "Esrgan Tile",
                        "type": "number",
                        "description": "Tile size for ESRGAN upscalers.",
                    },
                    "ESRGAN_tile_overlap": {
                        "title": "Esrgan Tile Overlap",
                        "type": "number",
                        "description": "Tile overlap for ESRGAN upscalers.",
                    },
                    "realesrgan_enabled_models": {
                        "title": "Realesrgan Enabled Models",
                        "type": "array",
                        "items": {},
                        "description": "Select which Real-ESRGAN models to show in the web UI.",
                    },
                    "upscaler_for_img2img": {
                        "title": "Upscaler For Img2Img",
                        "description": "Upscaler for img2img"
                    },
                    "face_restoration": {
                        "title": "Face Restoration",
                        "description": "Restore faces",
                    },
                    "face_restoration_model": {
                        "title": "Face Restoration Model",
                        "type": "string",
                        "description": "Face restoration model",
                    },
                    "code_former_weight": {
                        "title": "Code Former Weight",
                        "type": "number",
                        "description": "CodeFormer weight",
                    },
                    "face_restoration_unload": {
                        "title": "Face Restoration Unload",
                        "description": "Move face restoration model from VRAM into RAM after processing",
                    },
                    "auto_launch_browser": {
                        "title": "Auto Launch Browser",
                        "type": "string",
                        "description": "Automatically open webui in browser on startup",
                    },
                    "show_warnings": {
                        "title": "Show Warnings",
                        "description": "Show warnings in console.",
                    },
                    "show_gradio_deprecation_warnings": {
                        "title": "Show Gradio Deprecation Warnings",
                        "type": "boolean",
                        "description": "Show gradio deprecation warnings in console.",
                    },
                    "memmon_poll_rate": {
                        "title": "Memmon Poll Rate",
                        "type": "number",
                        "description": "VRAM usage polls per second during generation.",
                    },
                    "samples_log_stdout": {
                        "title": "Samples Log Stdout",
                        "description": "Always print all generation info to standard output",
                    },
                    "multiple_tqdm": {
                        "title": "Multiple Tqdm",
                        "type": "boolean",
                        "description": "Add a second progress bar to the console that shows progress for an entire job.",
                    },
                    "print_hypernet_extra": {
                        "title": "Print Hypernet Extra",
                        "description": "Print extra hypernetwork information to console.",
                    },
                    "list_hidden_files": {
                        "title": "List Hidden Files",
                        "type": "boolean",
                        "description": "Load models/files in hidden directories",
                    },
                    "disable_mmap_load_safetensors": {
                        "title": "Disable Mmap Load Safetensors",
                        "description": "Disable memmapping for loading .safetensors files.",
                    },
                    "hide_ldm_prints": {
                        "title": "Hide Ldm Prints",
                        "type": "boolean",
                        "description": "Prevent Stability-AI's ldm/sgm modules from printing noise to console.",
                    },
                    "api_enable_requests": {
                        "title": "Api Enable Requests",
                        "type": "boolean",
                        "description": "Allow http:// and https:// URLs for input images in API",
                    },
                    "api_forbid_local_requests": {
                        "title": "Api Forbid Local Requests",
                        "type": "boolean",
                        "description": "Forbid URLs to local resources",
                    },
                    "api_useragent": {
                        "title": "Api Useragent",
                        "description": "User agent for requests",
                    },
                    "unload_models_when_training": {
                        "title": "Unload Models When Training",
                        "description": "Move VAE and CLIP to RAM when training if possible. Saves VRAM.",
                    },
                    "pin_memory": {
                        "title": "Pin Memory",
                        "description": "Turn on pin_memory for DataLoader. Makes training slightly faster but can increase memory usage.",
                    },
                    "save_optimizer_state": {
                        "title": "Save Optimizer State",
                        "description": "Saves Optimizer state as separate *.optim file. Training of embedding or HN can be resumed with the matching optim file.",
                    },
                    "save_training_settings_to_txt": {
                        "title": "Save Training Settings To Txt",
                        "type": "boolean",
                        "description": "Save textual inversion and hypernet settings to a text file whenever training starts.",
                    },
                    "dataset_filename_word_regex": {
                        "title": "Dataset Filename Word Regex",
                        "description": "Filename word regex",
                    },
                    "dataset_filename_join_string": {
                        "title": "Dataset Filename Join String",
                        "type": "string",
                        "description": "Filename join string",
                    },
                    "training_image_repeats_per_epoch": {
                        "title": "Training Image Repeats Per Epoch",
                        "type": "number",
                        "description": "Number of repeats for a single input image per epoch; used only for displaying epoch number",
                    },
                    "training_write_csv_every": {
                        "title": "Training Write Csv Every",
                        "type": "number",
                        "description": "Save an csv containing the loss to log directory every N steps, 0 to disable",
                    },
                    "training_xattention_optimizations": {
                        "title": "Training Xattention Optimizations",
                        "description": "Use cross attention optimizations while training",
                    },
                    "training_enable_tensorboard": {
                        "title": "Training Enable Tensorboard",
                        "description": "Enable tensorboard logging.",
                    },
                    "training_tensorboard_save_images": {
                        "title": "Training Tensorboard Save Images",
                        "description": "Save generated images within tensorboard.",
                    },
                    "training_tensorboard_flush_every": {
                        "title": "Training Tensorboard Flush Every",
                        "type": "number",
                        "description": "How often, in seconds, to flush the pending tensorboard events and summaries to disk.",
                    },
                    "sd_model_checkpoint": {
                        "title": "Sd Model Checkpoint",
                        "description": "Stable Diffusion checkpoint"
                    },
                    "sd_checkpoints_limit": {
                        "title": "Sd Checkpoints Limit",
                        "type": "number",
                        "description": "Maximum number of checkpoints loaded at the same time",
                    },
                    "sd_checkpoints_keep_in_cpu": {
                        "title": "Sd Checkpoints Keep In Cpu",
                        "type": "boolean",
                        "description": "Only keep one model on device",
                    },
                    "sd_checkpoint_cache": {
                        "title": "Sd Checkpoint Cache",
                        "description": "Checkpoints to cache in RAM",
                    },
                    "sd_unet": {
                        "title": "Sd Unet",
                        "type": "string",
                        "description": "SD Unet",
                    },
                    "enable_quantization": {
                        "title": "Enable Quantization",
                        "description": "Enable quantization in K samplers for sharper and cleaner results. This may change existing seeds",
                    },
                    "enable_emphasis": {
                        "title": "Enable Emphasis",
                        "type": "boolean",
                        "description": "Enable emphasis",
                    },
                    "enable_batch_seeds": {
                        "title": "Enable Batch Seeds",
                        "type": "boolean",
                        "description": "Make K-diffusion samplers produce same images in a batch as when making a single image",
                    },
                    "comma_padding_backtrack": {
                        "title": "Comma Padding Backtrack",
                        "type": "number",
                        "description": "Prompt word wrap length limit",
                    },
                    "CLIP_stop_at_last_layers": {
                        "title": "Clip Stop At Last Layers",
                        "type": "number",
                        "description": "Clip skip",
                    },
                    "upcast_attn": {
                        "title": "Upcast Attn",
                        "description": "Upcast cross attention layer to float32",
                    },
                    "randn_source": {
                        "title": "Randn Source",
                        "type": "string",
                        "description": "Random number generator source.",
                    },
                    "tiling": {
                        "title": "Tiling",
                        "description": "Tiling",
                    },
                    "hires_fix_refiner_pass": {
                        "title": "Hires Fix Refiner Pass",
                        "type": "string",
                        "description": "Hires fix: which pass to enable refiner for",
                    },
                    "sdxl_crop_top": {
                        "title": "Sdxl Crop Top",
                        "description": "crop top coordinate",
                    },
                    "sdxl_crop_left": {
                        "title": "Sdxl Crop Left",
                        "description": "crop left coordinate",
                    },
                    "sdxl_refiner_low_aesthetic_score": {
                        "title": "Sdxl Refiner Low Aesthetic Score",
                        "type": "number",
                        "description": "SDXL low aesthetic score",
                    },
                    "sdxl_refiner_high_aesthetic_score": {
                        "title": "Sdxl Refiner High Aesthetic Score",
                        "type": "number",
                        "description": "SDXL high aesthetic score",
                    },
                    "sd_vae_explanation": {
                        "title": "Sd Vae Explanation",
                        "type": "string",
                    },
                    "sd_vae_checkpoint_cache": {
                        "title": "Sd Vae Checkpoint Cache",
                        "description": "VAE Checkpoints to cache in RAM",
                    },
                    "sd_vae": {
                        "title": "Sd Vae",
                        "type": "string",
                        "description": "SD VAE",
                    },
                    "sd_vae_overrides_per_model_preferences": {
                        "title": "Sd Vae Overrides Per Model Preferences",
                        "type": "boolean",
                        "description": "Selected VAE overrides per-model preferences",
                    },
                    "auto_vae_precision": {
                        "title": "Auto Vae Precision",
                        "type": "boolean",
                        "description": "Automatically revert VAE to 32-bit floats",
                    },
                    "sd_vae_encode_method": {
                        "title": "Sd Vae Encode Method",
                        "type": "string",
                        "description": "VAE type for encode",
                    },
                    "sd_vae_decode_method": {
                        "title": "Sd Vae Decode Method",
                        "type": "string",
                        "description": "VAE type for decode",
                    },
                    "inpainting_mask_weight": {
                        "title": "Inpainting Mask Weight",
                        "type": "number",
                        "description": "Inpainting conditioning mask strength",
                    },
                    "initial_noise_multiplier": {
                        "title": "Initial Noise Multiplier",
                        "type": "number",
                        "description": "Noise multiplier for img2img",
                    },
                    "img2img_extra_noise": {
                        "title": "Img2Img Extra Noise",
                        "description": "Extra noise multiplier for img2img and hires fix",
                    },
                    "img2img_color_correction": {
                        "title": "Img2Img Color Correction",
                        "description": "Apply color correction to img2img results to match original colors.",
                    },
                    "img2img_fix_steps": {
                        "title": "Img2Img Fix Steps",
                        "description": "With img2img, do exactly the amount of steps the slider specifies.",
                    },
                    "img2img_background_color": {
                        "title": "Img2Img Background Color",
                        "type": "string",
                        "description": "With img2img, fill transparent parts of the input image with this color.",
                    },
                    "img2img_editor_height": {
                        "title": "Img2Img Editor Height",
                        "type": "number",
                        "description": "Height of the image editor",
                    },
                    "img2img_sketch_default_brush_color": {
                        "title": "Img2Img Sketch Default Brush Color",
                        "type": "string",
                        "description": "Sketch initial brush color",
                    },
                    "img2img_inpaint_mask_brush_color": {
                        "title": "Img2Img Inpaint Mask Brush Color",
                        "type": "string",
                        "description": "Inpaint mask brush color",
                    },
                    "img2img_inpaint_sketch_default_brush_color": {
                        "title": "Img2Img Inpaint Sketch Default Brush Color",
                        "type": "string",
                        "description": "Inpaint sketch initial brush color",
                    },
                    "return_mask": {
                        "title": "Return Mask",
                        "description": "For inpainting, include the greyscale mask in results for web",
                    },
                    "return_mask_composite": {
                        "title": "Return Mask Composite",
                        "description": "For inpainting, include masked composite in results for web",
                    },
                    "cross_attention_optimization": {
                        "title": "Cross Attention Optimization",
                        "type": "string",
                        "description": "Cross attention optimization",
                    },
                    "s_min_uncond": {
                        "title": "S Min Uncond",
                        "description": "Negative Guidance minimum sigma",
                    },
                    "token_merging_ratio": {
                        "title": "Token Merging Ratio",
                        "description": "Token merging ratio",
                    },
                    "token_merging_ratio_img2img": {
                        "title": "Token Merging Ratio Img2Img",
                        "description": "Token merging ratio for img2img",
                    },
                    "token_merging_ratio_hr": {
                        "title": "Token Merging Ratio Hr",
                        "description": "Token merging ratio for high-res pass",
                    },
                    "pad_cond_uncond": {
                        "title": "Pad Cond Uncond",
                        "description": "Pad prompt/negative prompt to be same length",
                    },
                    "persistent_cond_cache": {
                        "title": "Persistent Cond Cache",
                        "type": "boolean",
                        "description": "Persistent cond cache",
                    },
                    "batch_cond_uncond": {
                        "title": "Batch Cond Uncond",
                        "type": "boolean",
                        "description": "Batch cond/uncond",
                    },
                    "use_old_emphasis_implementation": {
                        "title": "Use Old Emphasis Implementation",
                        "description": "Use old emphasis implementation. Can be useful to reproduce old seeds.",
                    },
                    "use_old_karras_scheduler_sigmas": {
                        "title": "Use Old Karras Scheduler Sigmas",
                        "description": "Use old karras scheduler sigmas (0.1 to 10).",
                    },
                    "no_dpmpp_sde_batch_determinism": {
                        "title": "No Dpmpp Sde Batch Determinism",
                        "description": "Do not make DPM++ SDE deterministic across different batch sizes.",
                    },
                    "use_old_hires_fix_width_height": {
                        "title": "Use Old Hires Fix Width Height",
                        "description": "For hires fix, use width/height sliders to set final resolution rather than first pass (disables Upscale by, Resize width/height to).",
                    },
                    "dont_fix_second_order_samplers_schedule": {
                        "title": "Dont Fix Second Order Samplers Schedule",
                        "description": "Do not fix prompt schedule for second order samplers.",
                    },
                    "hires_fix_use_firstpass_conds": {
                        "title": "Hires Fix Use Firstpass Conds",
                        "description": "For hires fix, calculate conds of second pass using extra networks of first pass.",
                    },
                    "use_old_scheduling": {
                        "title": "Use Old Scheduling",
                        "description": "Use old prompt editing timelines.",
                    },
                    "interrogate_keep_models_in_memory": {
                        "title": "Interrogate Keep Models In Memory",
                        "description": "Keep models in VRAM",
                    },
                    "interrogate_return_ranks": {
                        "title": "Interrogate Return Ranks",
                        "description": "Include ranks of model tags matches in results.",
                    },
                    "interrogate_clip_num_beams": {
                        "title": "Interrogate Clip Num Beams",
                        "type": "number",
                        "description": "BLIP: num_beams",
                    },
                    "interrogate_clip_min_length": {
                        "title": "Interrogate Clip Min Length",
                        "type": "number",
                        "description": "BLIP: minimum description length",
                    },
                    "interrogate_clip_max_length": {
                        "title": "Interrogate Clip Max Length",
                        "type": "number",
                        "description": "BLIP: maximum description length",
                    },
                    "interrogate_clip_dict_limit": {
                        "title": "Interrogate Clip Dict Limit",
                        "type": "number",
                        "description": "CLIP: maximum number of lines in text file",
                    },
                    "interrogate_clip_skip_categories": {
                        "title": "Interrogate Clip Skip Categories",
                        "description": "CLIP: skip inquire categories",
                    },
                    "interrogate_deepbooru_score_threshold": {
                        "title": "Interrogate Deepbooru Score Threshold",
                        "type": "number",
                        "description": "deepbooru: score threshold",
                    },
                    "deepbooru_sort_alpha": {
                        "title": "Deepbooru Sort Alpha",
                        "type": "boolean",
                        "description": "deepbooru: sort tags alphabetically",
                    },
                    "deepbooru_use_spaces": {
                        "title": "Deepbooru Use Spaces",
                        "type": "boolean",
                        "description": "deepbooru: use spaces in tags",
                    },
                    "deepbooru_escape": {
                        "title": "Deepbooru Escape",
                        "type": "boolean",
                        "description": "deepbooru: escape (\\) brackets",
                    },
                    "deepbooru_filter_tags": {
                        "title": "Deepbooru Filter Tags",
                        "description": "deepbooru: filter out those tags",
                    },
                    "extra_networks_show_hidden_directories": {
                        "title": "Extra Networks Show Hidden Directories",
                        "type": "boolean",
                        "description": "Show hidden directories",
                    },
                    "extra_networks_hidden_models": {
                        "title": "Extra Networks Hidden Models",
                        "type": "string",
                        "description": "Show cards for models in hidden directories",
                    },
                    "extra_networks_default_multiplier": {
                        "title": "Extra Networks Default Multiplier",
                        "type": "number",
                        "description": "Default multiplier for extra networks",
                    },
                    "extra_networks_card_width": {
                        "title": "Extra Networks Card Width",
                        "description": "Card width for Extra Networks",
                    },
                    "extra_networks_card_height": {
                        "title": "Extra Networks Card Height",
                        "description": "Card height for Extra Networks",
                    },
                    "extra_networks_card_text_scale": {
                        "title": "Extra Networks Card Text Scale",
                        "type": "number",
                        "description": "Card text scale",
                    },
                    "extra_networks_card_show_desc": {
                        "title": "Extra Networks Card Show Desc",
                        "type": "boolean",
                        "description": "Show description on card",
                    },
                    "extra_networks_add_text_separator": {
                        "title": "Extra Networks Add Text Separator",
                        "type": "string",
                        "description": "Extra networks separator",
                    },
                    "ui_extra_networks_tab_reorder": {
                        "title": "Ui Extra Networks Tab Reorder",
                        "description": "Extra networks tab order",
                    },
                    "textual_inversion_print_at_load": {
                        "title": "Textual Inversion Print At Load",
                        "description": "Print a list of Textual Inversion embeddings when loading model",
                    },
                    "textual_inversion_add_hashes_to_infotext": {
                        "title": "Textual Inversion Add Hashes To Infotext",
                        "type": "boolean",
                        "description": "Add Textual Inversion hashes to infotext",
                    },
                    "sd_hypernetwork": {
                        "title": "Sd Hypernetwork",
                        "type": "string",
                        "description": "Add hypernetwork to prompt",
                    },
                    "localization": {
                        "title": "Localization",
                        "type": "string",
                        "description": "Localization",
                    },
                    "gradio_theme": {
                        "title": "Gradio Theme",
                        "type": "string",
                        "description": "Gradio theme",
                    },
                    "gradio_themes_cache": {
                        "title": "Gradio Themes Cache",
                        "type": "boolean",
                        "description": "Cache gradio themes locally",
                    },
                    "gallery_height": {
                        "title": "Gallery Height",
                        "description": "Gallery height",
                    },
                    "return_grid": {
                        "title": "Return Grid",
                        "type": "boolean",
                        "description": "Show grid in results for web",
                    },
                    "do_not_show_images": {
                        "title": "Do Not Show Images",
                        "description": "Do not show any images in results for web",
                    },
                    "send_seed": {
                        "title": "Send Seed",
                        "type": "boolean",
                        "description": "Send seed when sending prompt or image to other interface",
                    },
                    "send_size": {
                        "title": "Send Size",
                        "type": "boolean",
                        "description": "Send size when sending prompt or image to another interface",
                    },
                    "js_modal_lightbox": {
                        "title": "Js Modal Lightbox",
                        "type": "boolean",
                        "description": "Enable full page image viewer",
                    },
                    "js_modal_lightbox_initially_zoomed": {
                        "title": "Js Modal Lightbox Initially Zoomed",
                        "type": "boolean",
                        "description": "Show images zoomed in by default in full page image viewer",
                    },
                    "js_modal_lightbox_gamepad": {
                        "title": "Js Modal Lightbox Gamepad",
                        "description": "Navigate image viewer with gamepad",
                    },
                    "js_modal_lightbox_gamepad_repeat": {
                        "title": "Js Modal Lightbox Gamepad Repeat",
                        "type": "number",
                        "description": "Gamepad repeat period, in milliseconds",
                    },
                    "show_progress_in_title": {
                        "title": "Show Progress In Title",
                        "type": "boolean",
                        "description": "Show generation progress in window title.",
                    },
                    "samplers_in_dropdown": {
                        "title": "Samplers In Dropdown",
                        "type": "boolean",
                        "description": "Use dropdown for sampler selection instead of radio group",
                    },
                    "dimensions_and_batch_together": {
                        "title": "Dimensions And Batch Together",
                        "type": "boolean",
                        "description": "Show Width/Height and Batch sliders in same row",
                    },
                    "keyedit_precision_attention": {
                        "title": "Keyedit Precision Attention",
                        "type": "number",
                        "description": "Ctrl+up/down precision when editing (attention:1.1)",
                    },
                    "keyedit_precision_extra": {
                        "title": "Keyedit Precision Extra",
                        "type": "number",
                        "description": "Ctrl+up/down precision when editing <extra networks:0.9>",
                    },
                    "keyedit_delimiters": {
                        "title": "Keyedit Delimiters",
                        "type": "string",
                        "description": "Ctrl+up/down word delimiters",
                    },
                    "keyedit_move": {
                        "title": "Keyedit Move",
                        "type": "boolean",
                        "description": "Alt+left/right moves prompt elements",
                    },
                    "quicksettings_list": {
                        "title": "Quicksettings List",
                        "type": "array",
                        "items": {},
                        "description": "Quicksettings list"
                    },
                    "ui_tab_order": {
                        "title": "Ui Tab Order",
                        "description": "UI tab order",
                    },
                    "hidden_tabs": {
                        "title": "Hidden Tabs",
                        "description": "Hidden UI tabs",
                    },
                    "ui_reorder_list": {
                        "title": "Ui Reorder List",
                        "description": "txt2img/img2img UI item order",
                    },
                    "hires_fix_show_sampler": {
                        "title": "Hires Fix Show Sampler",
                        "description": "Hires fix: show hires checkpoint and sampler selection",
                    },
                    "hires_fix_show_prompts": {
                        "title": "Hires Fix Show Prompts",
                        "description": "Hires fix: show hires prompt and negative prompt",
                    },
                    "disable_token_counters": {
                        "title": "Disable Token Counters",
                        "description": "Disable prompt token counters",
                    },
                    "add_model_hash_to_info": {
                        "title": "Add Model Hash To Info",
                        "type": "boolean",
                        "description": "Add model hash to generation information",
                    },
                    "add_model_name_to_info": {
                        "title": "Add Model Name To Info",
                        "type": "boolean",
                        "description": "Add model name to generation information",
                    },
                    "add_user_name_to_info": {
                        "title": "Add User Name To Info",
                        "description": "Add user name to generation information when authenticated",
                    },
                    "add_version_to_infotext": {
                        "title": "Add Version To Infotext",
                        "type": "boolean",
                        "description": "Add program version to generation information",
                    },
                    "disable_weights_auto_swap": {
                        "title": "Disable Weights Auto Swap",
                        "type": "boolean",
                        "description": "Disregard checkpoint information from pasted infotext",
                    },
                    "infotext_styles": {
                        "title": "Infotext Styles",
                        "type": "string",
                        "description": "Infer styles from prompts of pasted infotext",
                    },
                    "show_progressbar": {
                        "title": "Show Progressbar",
                        "type": "boolean",
                        "description": "Show progressbar",
                    },
                    "live_previews_enable": {
                        "title": "Live Previews Enable",
                        "type": "boolean",
                        "description": "Show live previews of the created image",
                    },
                    "live_previews_image_format": {
                        "title": "Live Previews Image Format",
                        "type": "string",
                        "description": "Live preview file format",
                    },
                    "show_progress_grid": {
                        "title": "Show Progress Grid",
                        "type": "boolean",
                        "description": "Show previews of all images generated in a batch as a grid",
                    },
                    "show_progress_every_n_steps": {
                        "title": "Show Progress Every N Steps",
                        "type": "number",
                        "description": "Live preview display period",
                    },
                    "show_progress_type": {
                        "title": "Show Progress Type",
                        "type": "string",
                        "description": "Live preview method",
                    },
                    "live_preview_allow_lowvram_full": {
                        "title": "Live Preview Allow Lowvram Full",
                        "description": "Allow Full live preview method with lowvram/medvram",
                    },
                    "live_preview_content": {
                        "title": "Live Preview Content",
                        "type": "string",
                        "description": "Live preview subject",
                    },
                    "live_preview_refresh_period": {
                        "title": "Live Preview Refresh Period",
                        "type": "number",
                        "description": "Progressbar and preview update period",
                    },
                    "live_preview_fast_interrupt": {
                        "title": "Live Preview Fast Interrupt",
                        "description": "Return image with chosen live preview method on interrupt",
                    },
                    "hide_samplers": {
                        "title": "Hide Samplers",
                        "description": "Hide samplers in user interface",
                    },
                    "eta_ddim": {
                        "title": "Eta Ddim",
                        "description": "Eta for DDIM",
                    },
                    "eta_ancestral": {
                        "title": "Eta Ancestral",
                        "type": "number",
                        "description": "Eta for k-diffusion samplers",
                    },
                    "ddim_discretize": {
                        "title": "Ddim Discretize",
                        "type": "string",
                        "description": "img2img DDIM discretize",
                    },
                    "s_churn": {
                        "title": "S Churn",
                        "description": "sigma churn",
                    },
                    "s_tmin": {
                        "title": "S Tmin",
                        "description": "sigma tmin",
                    },
                    "s_tmax": {
                        "title": "S Tmax",
                        "description": "sigma tmax",
                    },
                    "s_noise": {
                        "title": "S Noise",
                        "type": "number",
                        "description": "sigma noise",
                    },
                    "k_sched_type": {
                        "title": "K Sched Type",
                        "type": "string",
                        "description": "Scheduler type",
                    },
                    "sigma_min": {
                        "title": "Sigma Min",
                        "description": "sigma min",
                    },
                    "sigma_max": {
                        "title": "Sigma Max",
                        "description": "sigma max",
                    },
                    "rho": {
                        "title": "Rho",
                        "description": "rho",
                    },
                    "eta_noise_seed_delta": {
                        "title": "Eta Noise Seed Delta",
                        "description": "Eta noise seed delta",
                    },
                    "always_discard_next_to_last_sigma": {
                        "title": "Always Discard Next To Last Sigma",
                        "description": "Always discard next-to-last sigma",
                    },
                    "sgm_noise_multiplier": {
                        "title": "Sgm Noise Multiplier",
                        "description": "SGM noise multiplier",
                    },
                    "uni_pc_variant": {
                        "title": "Uni Pc Variant",
                        "type": "string",
                        "description": "UniPC variant",
                    },
                    "uni_pc_skip_type": {
                        "title": "Uni Pc Skip Type",
                        "type": "string",
                        "description": "UniPC skip type",
                    },
                    "uni_pc_order": {
                        "title": "Uni Pc Order",
                        "type": "number",
                        "description": "UniPC order",
                    },
                    "uni_pc_lower_order_final": {
                        "title": "Uni Pc Lower Order Final",
                        "type": "boolean",
                        "description": "UniPC lower order final",
                    },
                    "postprocessing_enable_in_main_ui": {
                        "title": "Postprocessing Enable In Main Ui",
                        "description": "Enable postprocessing operations in txt2img and img2img tabs",
                    },
                    "postprocessing_operation_order": {
                        "title": "Postprocessing Operation Order",
                        "description": "Postprocessing operation order",
                    },
                    "upscaling_max_images_in_cache": {
                        "title": "Upscaling Max Images In Cache",
                        "type": "number",
                        "description": "Maximum number of images in upscaling cache",
                    },
                    "disabled_extensions": {
                        "title": "Disabled Extensions",
                        "description": "Disable these extensions",
                    },
                    "disable_all_extensions": {
                        "title": "Disable All Extensions",
                        "type": "string",
                        "description": "Disable all extensions (preserves the list of disabled extensions)",
                    },
                    "restore_config_state_file": {
                        "title": "Restore Config State File",
                        "description": "Config state file to restore from, under 'config-states/' folder",
                    },
                    "sd_checkpoint_hash": {
                        "title": "Sd Checkpoint Hash",
                        "description": "SHA256 hash of the current checkpoint",
                    },
                    "canvas_hotkey_zoom": {
                        "title": "Canvas Hotkey Zoom",
                        "type": "string",
                        "description": "Zoom canvas",
                    },
                    "canvas_hotkey_adjust": {
                        "title": "Canvas Hotkey Adjust",
                        "type": "string",
                        "description": "Adjust brush size",
                    },
                    "canvas_zoom_undo_extra_key": {
                        "title": "Canvas Zoom Undo Extra Key",
                        "type": "string",
                        "description": "Extra key to undo",
                    },
                    "canvas_zoom_hotkey_undo": {
                        "title": "Canvas Zoom Hotkey Undo",
                        "type": "string",
                        "description": "Undo last action",
                    },
                    "canvas_hotkey_move": {
                        "title": "Canvas Hotkey Move",
                        "type": "string",
                        "description": "Moving the canvas",
                    },
                    "canvas_hotkey_fullscreen": {
                        "title": "Canvas Hotkey Fullscreen",
                        "type": "string",
                        "description": "Fullscreen Mode, maximizes the picture so that it fits into the screen and stretches it to its full width ",
                    },
                    "canvas_hotkey_reset": {
                        "title": "Canvas Hotkey Reset",
                        "type": "string",
                        "description": "Reset zoom and canvas positon",
                    },
                    "canvas_zoom_hotkey_open_colorpanel": {
                        "title": "Canvas Zoom Hotkey Open Colorpanel",
                        "type": "string",
                        "description": "Quickly open the color panel",
                    },
                    "canvas_zoom_hotkey_pin_colorpanel": {
                        "title": "Canvas Zoom Hotkey Pin Colorpanel",
                        "type": "string",
                        "description": "Attach the color panel to the mouse ",
                    },
                    "canvas_zoom_hotkey_dropper": {
                        "title": "Canvas Zoom Hotkey Dropper",
                        "type": "string",
                        "description": "Toggle dropper ( Works in Sketch and Inpaint Sketch )",
                    },
                    "canvas_zoom_hotkey_fill": {
                        "title": "Canvas Zoom Hotkey Fill",
                        "type": "string",
                        "description": "Fill the canvas with brush color ( works in sketch/inpaint sketch )",
                    },
                    "canvas_zoom_hotkey_transparency": {
                        "title": "Canvas Zoom Hotkey Transparency",
                        "type": "string",
                        "description": "Activate transparency mode (works only in Inpaint)",
                    },
                    "canvas_hotkey_overlap": {
                        "title": "Canvas Hotkey Overlap",
                        "type": "string",
                        "description": "Toggle overlap ( Technical button, neededs for testing )",
                    },
                    "canvas_show_tooltip": {
                        "title": "Canvas Show Tooltip",
                        "type": "boolean",
                        "description": "Enable tooltip on the canvas",
                    },
                    "canvas_zoom_hide_btn": {
                        "title": "Canvas Zoom Hide Btn",
                        "type": "boolean",
                        "description": "Hide the control buttons when you draw",
                    },
                    "canvas_zoom_mask_clear": {
                        "title": "Canvas Zoom Mask Clear",
                        "type": "boolean",
                        "description": "Enable mask clearing in inpaint after any picture is moved in inpaint via buttons",
                    },
                    "canvas_auto_expand": {
                        "title": "Canvas Auto Expand",
                        "type": "boolean",
                        "description": "Automatic expansion of an image that does not fit completely within the canvas area, similar to manual S and R entry",
                    },
                    "canvas_zoom_enable_integration": {
                        "title": "Canvas Zoom Enable Integration",
                        "type": "boolean",
                        "description": "Enable integration with ControlNet, Regional Prompter and Latent Couple(Two Shot), Inpaint Anything",
                    },
                    "canvas_zoom_transparency_level": {
                        "title": "Canvas Zoom Transparency Level",
                        "type": "number",
                        "description": "Opacity level in inpaint.Works with webui 1.6 otherwise this setting will adjust the transparency in transparency mode from the extension",
                    },
                    "canvas_zoom_brush_opacity": {
                        "title": "Canvas Zoom Brush Opacity",
                        "description": "Makes the brush the same transparency as the mask",
                    },
                    "canvas_zoom_inpaint_prevent_work": {
                        "title": "Canvas Zoom Inpaint Prevent Work",
                        "description": "Always prevent inpainting models work on txt2img tab by default",
                    },
                    "canvas_zoom_inpaint_label": {
                        "title": "Canvas Zoom Inpaint Label",
                        "type": "boolean",
                        "description": "INPAINT - Show the label next to the model selection when you select an inpaint model",
                    },
                    "canvas_zoom_inpaint_warning": {
                        "title": "Canvas Zoom Inpaint Warning",
                        "type": "boolean",
                        "description": "INPAINT - Show warning when you try to use inpaint model in txt2img mode(The model name must contain 'inpainting' or 'inpaint'.)",
                    },
                    "canvas_zoom_inpaint_change_btn_color": {
                        "title": "Canvas Zoom Inpaint Change Btn Color",
                        "description": "INPAINT - Enable button color change when inpaint model is selected",
                    },
                    "canvas_zoom_inpaint_btn_color": {
                        "title": "Canvas Zoom Inpaint Btn Color",
                        "type": "string",
                        "description": "INPAINT - Change the color of the button, which will change if the inpaint model is selected.",
                    },
                    "canvas_zoom_brush_outline": {
                        "title": "Canvas Zoom Brush Outline",
                        "description": "Enable outline for the brush",
                    },
                    "canvas_zoom_add_buttons": {
                        "title": "Canvas Zoom Add Buttons",
                        "description": "Add a button to switch to full screen mode. May be useful for devices without keyboard",
                    },
                    "canvas_blur_prompt": {
                        "title": "Canvas Blur Prompt",
                        "description": "Take the focus off the prompt when working with a canvas",
                    },
                    "canvas_zoom_draw_staight_lines": {
                        "title": "Canvas Zoom Draw Staight Lines",
                        "description": "Enable the function of drawing straight lines between points while holding down the Shift key",
                    },
                    "canvas_zoom_inpaint_brushcolor": {
                        "title": "Canvas Zoom Inpaint Brushcolor",
                        "type": "string",
                        "description": "Change the default inpaint brush color. Since version 1.6 this setting doesnt work, look for it in \"img2img\" in the settings .",
                    },
                    "canvas_zoom_disabled_functions": {
                        "title": "Canvas Zoom Disabled Functions",
                        "type": "array",
                        "items": {},
                        "description": "Disable function that you don't use",
                    }
                }
            },
            "PNGInfoRequest": {
                "title": "PNGInfoRequest",
                "required": [
                    "image"
                ],
                "type": "object",
                "properties": {
                    "image": {
                        "title": "Image",
                        "type": "string",
                        "description": "The base64 encoded PNG image"
                    }
                }
            },
            "PNGInfoResponse": {
                "title": "PNGInfoResponse",
                "required": [
                    "info",
                    "items"
                ],
                "type": "object",
                "properties": {
                    "info": {
                        "title": "Image info",
                        "type": "string",
                        "description": "A string with the parameters used to generate the image"
                    },
                    "items": {
                        "title": "Items",
                        "type": "object",
                        "description": "An object containing all the info the image had"
                    }
                }
            },
            "PredictBody": {
                "title": "PredictBody",
                "required": [
                    "data"
                ],
                "type": "object",
                "properties": {
                    "session_hash": {
                        "title": "Session Hash",
                        "type": "string"
                    },
                    "event_id": {
                        "title": "Event Id",
                        "type": "string"
                    },
                    "data": {
                        "title": "Data",
                        "type": "array",
                        "items": {}
                    },
                    "event_data": {
                        "title": "Event Data"
                    },
                    "fn_index": {
                        "title": "Fn Index",
                        "type": "integer"
                    },
                    "batched": {
                        "title": "Batched",
                        "type": "boolean",
                        "default": false
                    },
                    "request": {
                        "title": "Request",
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "object"
                                }
                            }
                        ]
                    }
                }
            },
            "PreprocessResponse": {
                "title": "PreprocessResponse",
                "required": [
                    "info"
                ],
                "type": "object",
                "properties": {
                    "info": {
                        "title": "Preprocess info",
                        "type": "string",
                        "description": "Response string from preprocessing task."
                    }
                }
            },
            "ProgressRequest": {
                "title": "ProgressRequest",
                "type": "object",
                "properties": {
                    "id_task": {
                        "title": "Task ID",
                        "type": "string",
                        "description": "id of the task to get progress for"
                    },
                    "id_live_preview": {
                        "title": "Live preview image ID",
                        "type": "integer",
                        "description": "id of last received last preview image",
                        "default": -1
                    },
                    "live_preview": {
                        "title": "Include live preview",
                        "type": "boolean",
                        "description": "boolean flag indicating whether to include the live preview image",
                        "default": true
                    }
                }
            },
            "PromptStyleItem": {
                "title": "PromptStyleItem",
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string"
                    },
                    "prompt": {
                        "title": "Prompt",
                        "type": "string"
                    },
                    "negative_prompt": {
                        "title": "Negative Prompt",
                        "type": "string"
                    }
                }
            },
            "QuicksettingsHint": {
                "title": "QuicksettingsHint",
                "required": [
                    "name",
                    "label"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name of the quicksettings field",
                        "type": "string"
                    },
                    "label": {
                        "title": "Label of the quicksettings field",
                        "type": "string"
                    }
                }
            },
            "RealesrganItem": {
                "title": "RealesrganItem",
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string"
                    },
                    "path": {
                        "title": "Path",
                        "type": "string"
                    },
                    "scale": {
                        "title": "Scale",
                        "type": "integer"
                    }
                }
            },
            "ResetBody": {
                "title": "ResetBody",
                "required": [
                    "session_hash",
                    "fn_index"
                ],
                "type": "object",
                "properties": {
                    "session_hash": {
                        "title": "Session Hash",
                        "type": "string"
                    },
                    "fn_index": {
                        "title": "Fn Index",
                        "type": "integer"
                    }
                }
            },
            "SDModelItem": {
                "title": "SDModelItem",
                "required": [
                    "title",
                    "model_name",
                    "filename"
                ],
                "type": "object",
                "properties": {
                    "title": {
                        "title": "Title",
                        "type": "string"
                    },
                    "model_name": {
                        "title": "Model Name",
                        "type": "string"
                    },
                    "hash": {
                        "title": "Short hash",
                        "type": "string"
                    },
                    "sha256": {
                        "title": "sha256 hash",
                        "type": "string"
                    },
                    "filename": {
                        "title": "Filename",
                        "type": "string"
                    },
                    "config": {
                        "title": "Config file",
                        "type": "string"
                    }
                }
            },
            "SDVaeItem": {
                "title": "SDVaeItem",
                "required": [
                    "model_name",
                    "filename"
                ],
                "type": "object",
                "properties": {
                    "model_name": {
                        "title": "Model Name",
                        "type": "string"
                    },
                    "filename": {
                        "title": "Filename",
                        "type": "string"
                    }
                }
            },
            "SamplerItem": {
                "title": "SamplerItem",
                "required": [
                    "name",
                    "aliases",
                    "options"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string"
                    },
                    "aliases": {
                        "title": "Aliases",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "options": {
                        "title": "Options",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "ScriptArg": {
                "title": "ScriptArg",
                "type": "object",
                "properties": {
                    "label": {
                        "title": "Label",
                        "type": "string",
                        "description": "Name of the argument in UI"
                    },
                    "value": {
                        "title": "Value",
                        "description": "Default value of the argument"
                    },
                    "minimum": {
                        "title": "Minimum",
                        "description": "Minimum allowed value for the argumentin UI"
                    },
                    "maximum": {
                        "title": "Minimum",
                        "description": "Maximum allowed value for the argumentin UI"
                    },
                    "step": {
                        "title": "Minimum",
                        "description": "Step for changing value of the argumentin UI"
                    },
                    "choices": {
                        "title": "Choices",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Possible values for the argument"
                    }
                }
            },
            "ScriptInfo": {
                "title": "ScriptInfo",
                "required": [
                    "args"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Script name"
                    },
                    "is_alwayson": {
                        "title": "IsAlwayson",
                        "type": "boolean",
                        "description": "Flag specifying whether this script is an alwayson script"
                    },
                    "is_img2img": {
                        "title": "IsImg2img",
                        "type": "boolean",
                        "description": "Flag specifying whether this script is an img2img script"
                    },
                    "args": {
                        "title": "Arguments",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ScriptArg"
                        },
                        "description": "List of script's arguments"
                    }
                }
            },
            "ScriptsList": {
                "title": "ScriptsList",
                "type": "object",
                "properties": {
                    "txt2img": {
                        "title": "Txt2img",
                        "type": "array",
                        "items": {},
                        "description": "Titles of scripts (txt2img)"
                    },
                    "img2img": {
                        "title": "Img2img",
                        "type": "array",
                        "items": {},
                        "description": "Titles of scripts (img2img)"
                    }
                }
            },
            "StableDiffusionProcessingImg2Img": {
                "title": "StableDiffusionProcessingImg2Img",
                "type": "object",
                "properties": {
                    "prompt": {
                        "title": "Prompt",
                        "type": "string",
                        "default": ""
                    },
                    "negative_prompt": {
                        "title": "Negative Prompt",
                        "type": "string",
                        "default": ""
                    },
                    "styles": {
                        "title": "Styles",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "seed": {
                        "title": "Seed",
                        "type": "integer",
                        "format": "int64",
                        "default": -1
                    },
                    "subseed": {
                        "title": "Subseed",
                        "type": "integer",
                        "default": -1
                    },
                    "subseed_strength": {
                        "title": "Subseed Strength",
                        "type": "number",
                        "default": 0
                    },
                    "seed_resize_from_h": {
                        "title": "Seed Resize From H",
                        "type": "integer",
                        "default": -1
                    },
                    "seed_resize_from_w": {
                        "title": "Seed Resize From W",
                        "type": "integer",
                        "default": -1
                    },
                    "sampler_name": {
                        "title": "Sampler Name",
                        "type": "string"
                    },
                    "batch_size": {
                        "title": "Batch Size",
                        "type": "integer",
                        "default": 1
                    },
                    "n_iter": {
                        "title": "N Iter",
                        "type": "integer",
                        "default": 1
                    },
                    "steps": {
                        "title": "Steps",
                        "type": "integer",
                        "default": 50
                    },
                    "cfg_scale": {
                        "title": "Cfg Scale",
                        "type": "number",
                        "default": 7.0
                    },
                    "width": {
                        "title": "Width",
                        "type": "integer",
                        "default": 512
                    },
                    "height": {
                        "title": "Height",
                        "type": "integer",
                        "default": 512
                    },
                    "restore_faces": {
                        "title": "Restore Faces",
                        "type": "boolean"
                    },
                    "tiling": {
                        "title": "Tiling",
                        "type": "boolean"
                    },
                    "do_not_save_samples": {
                        "title": "Do Not Save Samples",
                        "type": "boolean",
                        "default": false
                    },
                    "do_not_save_grid": {
                        "title": "Do Not Save Grid",
                        "type": "boolean",
                        "default": false
                    },
                    "eta": {
                        "title": "Eta",
                        "type": "number"
                    },
                    "denoising_strength": {
                        "title": "Denoising Strength",
                        "type": "number",
                        "default": 0.75
                    },
                    "s_min_uncond": {
                        "title": "S Min Uncond",
                        "type": "number"
                    },
                    "s_churn": {
                        "title": "S Churn",
                        "type": "number"
                    },
                    "s_tmax": {
                        "title": "S Tmax",
                        "type": "number"
                    },
                    "s_tmin": {
                        "title": "S Tmin",
                        "type": "number"
                    },
                    "s_noise": {
                        "title": "S Noise",
                        "type": "number"
                    },
                    "override_settings": {
                        "title": "Override Settings",
                        "type": "object"
                    },
                    "override_settings_restore_afterwards": {
                        "title": "Override Settings Restore Afterwards",
                        "type": "boolean",
                        "default": true
                    },
                    "refiner_checkpoint": {
                        "title": "Refiner Checkpoint",
                        "type": "string"
                    },
                    "refiner_switch_at": {
                        "title": "Refiner Switch At",
                        "type": "number"
                    },
                    "disable_extra_networks": {
                        "title": "Disable Extra Networks",
                        "type": "boolean",
                        "default": false
                    },
                    "comments": {
                        "title": "Comments",
                        "type": "object"
                    },
                    "init_images": {
                        "title": "Init Images",
                        "type": "array",
                        "items": {}
                    },
                    "resize_mode": {
                        "title": "Resize Mode",
                        "type": "integer",
                        "default": 0
                    },
                    "image_cfg_scale": {
                        "title": "Image Cfg Scale",
                        "type": "number"
                    },
                    "mask": {
                        "title": "Mask",
                        "type": "string"
                    },
                    "mask_blur_x": {
                        "title": "Mask Blur X",
                        "type": "integer",
                        "default": 4
                    },
                    "mask_blur_y": {
                        "title": "Mask Blur Y",
                        "type": "integer",
                        "default": 4
                    },
                    "mask_blur": {
                        "title": "Mask Blur",
                        "type": "integer"
                    },
                    "inpainting_fill": {
                        "title": "Inpainting Fill",
                        "type": "integer",
                        "default": 0
                    },
                    "inpaint_full_res": {
                        "title": "Inpaint Full Res",
                        "type": "boolean",
                        "default": true
                    },
                    "inpaint_full_res_padding": {
                        "title": "Inpaint Full Res Padding",
                        "type": "integer",
                        "default": 0
                    },
                    "inpainting_mask_invert": {
                        "title": "Inpainting Mask Invert",
                        "type": "integer",
                        "default": 0
                    },
                    "initial_noise_multiplier": {
                        "title": "Initial Noise Multiplier",
                        "type": "number"
                    },
                    "latent_mask": {
                        "title": "Latent Mask",
                        "type": "string"
                    },
                    "sampler_index": {
                        "title": "Sampler Index",
                        "type": "string",
                        "default": "Euler"
                    },
                    "include_init_images": {
                        "title": "Include Init Images",
                        "type": "boolean",
                        "default": false
                    },
                    "script_name": {
                        "title": "Script Name",
                        "type": "string"
                    },
                    "script_args": {
                        "title": "Script Args",
                        "type": "array",
                        "items": {},
                        "default": []
                    },
                    "send_images": {
                        "title": "Send Images",
                        "type": "boolean",
                        "default": true
                    },
                    "save_images": {
                        "title": "Save Images",
                        "type": "boolean",
                        "default": false
                    },
                    "alwayson_scripts": {
                        "title": "Alwayson Scripts",
                        "type": "object",
                        "default": {}
                    }
                }
            },
            "StableDiffusionProcessingTxt2Img": {
                "title": "StableDiffusionProcessingTxt2Img",
                "type": "object",
                "properties": {
                    "prompt": {
                        "title": "Prompt",
                        "type": "string",
                        "default": ""
                    },
                    "negative_prompt": {
                        "title": "Negative Prompt",
                        "type": "string",
                        "default": ""
                    },
                    "styles": {
                        "title": "Styles",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "seed": {
                        "title": "Seed",
                        "type": "integer",
                        "format": "int64",
                        "default": -1
                    },
                    "subseed": {
                        "title": "Subseed",
                        "type": "integer",
                        "default": -1
                    },
                    "subseed_strength": {
                        "title": "Subseed Strength",
                        "type": "number",
                        "default": 0
                    },
                    "seed_resize_from_h": {
                        "title": "Seed Resize From H",
                        "type": "integer",
                        "default": -1
                    },
                    "seed_resize_from_w": {
                        "title": "Seed Resize From W",
                        "type": "integer",
                        "default": -1
                    },
                    "sampler_name": {
                        "title": "Sampler Name",
                        "type": "string"
                    },
                    "batch_size": {
                        "title": "Batch Size",
                        "type": "integer",
                        "default": 1
                    },
                    "n_iter": {
                        "title": "N Iter",
                        "type": "integer",
                        "default": 1
                    },
                    "steps": {
                        "title": "Steps",
                        "type": "integer",
                        "default": 50
                    },
                    "cfg_scale": {
                        "title": "Cfg Scale",
                        "type": "number",
                        "default": 7.0
                    },
                    "width": {
                        "title": "Width",
                        "type": "integer",
                        "default": 512
                    },
                    "height": {
                        "title": "Height",
                        "type": "integer",
                        "default": 512
                    },
                    "restore_faces": {
                        "title": "Restore Faces",
                        "type": "boolean"
                    },
                    "tiling": {
                        "title": "Tiling",
                        "type": "boolean"
                    },
                    "do_not_save_samples": {
                        "title": "Do Not Save Samples",
                        "type": "boolean",
                        "default": false
                    },
                    "do_not_save_grid": {
                        "title": "Do Not Save Grid",
                        "type": "boolean",
                        "default": false
                    },
                    "eta": {
                        "title": "Eta",
                        "type": "number"
                    },
                    "denoising_strength": {
                        "title": "Denoising Strength",
                        "type": "number",
                        "default": 0
                    },
                    "s_min_uncond": {
                        "title": "S Min Uncond",
                        "type": "number"
                    },
                    "s_churn": {
                        "title": "S Churn",
                        "type": "number"
                    },
                    "s_tmax": {
                        "title": "S Tmax",
                        "type": "number"
                    },
                    "s_tmin": {
                        "title": "S Tmin",
                        "type": "number"
                    },
                    "s_noise": {
                        "title": "S Noise",
                        "type": "number"
                    },
                    "override_settings": {
                        "title": "Override Settings",
                        "type": "object"
                    },
                    "override_settings_restore_afterwards": {
                        "title": "Override Settings Restore Afterwards",
                        "type": "boolean",
                        "default": true
                    },
                    "refiner_checkpoint": {
                        "title": "Refiner Checkpoint",
                        "type": "string"
                    },
                    "refiner_switch_at": {
                        "title": "Refiner Switch At",
                        "type": "number"
                    },
                    "disable_extra_networks": {
                        "title": "Disable Extra Networks",
                        "type": "boolean",
                        "default": false
                    },
                    "comments": {
                        "title": "Comments",
                        "type": "object"
                    },
                    "enable_hr": {
                        "title": "Enable Hr",
                        "type": "boolean",
                        "default": false
                    },
                    "firstphase_width": {
                        "title": "Firstphase Width",
                        "type": "integer",
                        "default": 0
                    },
                    "firstphase_height": {
                        "title": "Firstphase Height",
                        "type": "integer",
                        "default": 0
                    },
                    "hr_scale": {
                        "title": "Hr Scale",
                        "type": "number",
                        "default": 2.0
                    },
                    "hr_upscaler": {
                        "title": "Hr Upscaler",
                        "type": "string"
                    },
                    "hr_second_pass_steps": {
                        "title": "Hr Second Pass Steps",
                        "type": "integer",
                        "default": 0
                    },
                    "hr_resize_x": {
                        "title": "Hr Resize X",
                        "type": "integer",
                        "default": 0
                    },
                    "hr_resize_y": {
                        "title": "Hr Resize Y",
                        "type": "integer",
                        "default": 0
                    },
                    "hr_checkpoint_name": {
                        "title": "Hr Checkpoint Name",
                        "type": "string"
                    },
                    "hr_sampler_name": {
                        "title": "Hr Sampler Name",
                        "type": "string"
                    },
                    "hr_prompt": {
                        "title": "Hr Prompt",
                        "type": "string",
                        "default": ""
                    },
                    "hr_negative_prompt": {
                        "title": "Hr Negative Prompt",
                        "type": "string",
                        "default": ""
                    },
                    "sampler_index": {
                        "title": "Sampler Index",
                        "type": "string",
                        "default": "Euler"
                    },
                    "script_name": {
                        "title": "Script Name",
                        "type": "string"
                    },
                    "script_args": {
                        "title": "Script Args",
                        "type": "array",
                        "items": {},
                        "default": []
                    },
                    "send_images": {
                        "title": "Send Images",
                        "type": "boolean",
                        "default": true
                    },
                    "save_images": {
                        "title": "Save Images",
                        "type": "boolean",
                        "default": false
                    },
                    "alwayson_scripts": {
                        "title": "Alwayson Scripts",
                        "type": "object",
                        "default": {}
                    }
                }
            },
            "StatusRes": {
                "title": "StatusRes",
                "required": [
                    "version",
                    "uptime",
                    "timestamp"
                ],
                "type": "object",
                "properties": {
                    "version": {
                        "title": "Version",
                        "type": "object",
                        "description": "Server version"
                    },
                    "uptime": {
                        "title": "Uptime",
                        "type": "string",
                        "description": "Server uptime"
                    },
                    "timestamp": {
                        "title": "Timestamp",
                        "type": "string",
                        "description": "Data timestamp"
                    },
                    "state": {
                        "title": "State",
                        "type": "object",
                        "description": "Server state"
                    },
                    "memory": {
                        "title": "Memory",
                        "type": "object",
                        "description": "Server memory status"
                    },
                    "platform": {
                        "title": "Platform",
                        "type": "object",
                        "description": "Server platform"
                    },
                    "torch": {
                        "title": "Torch",
                        "type": "string",
                        "description": "Torch version"
                    },
                    "gpu": {
                        "title": "GPU",
                        "type": "object",
                        "description": "GPU info"
                    },
                    "optimizations": {
                        "title": "Optimizations",
                        "type": "array",
                        "items": {},
                        "description": "Memory optimizations"
                    },
                    "crossatention": {
                        "title": "CrossAttention",
                        "type": "string",
                        "description": "Cross-attention optimization"
                    },
                    "device": {
                        "title": "Device",
                        "type": "object",
                        "description": "Device info"
                    },
                    "backend": {
                        "title": "Backend",
                        "type": "string",
                        "description": "Backend"
                    },
                    "pipeline": {
                        "title": "Pipeline",
                        "type": "string",
                        "description": "Pipeline"
                    }
                }
            },
            "TextToImageResponse": {
                "title": "TextToImageResponse",
                "required": [
                    "parameters",
                    "info"
                ],
                "type": "object",
                "properties": {
                    "images": {
                        "title": "Image",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The generated image in base64 format."
                    },
                    "parameters": {
                        "title": "Parameters",
                        "type": "object"
                    },
                    "info": {
                        "title": "Info",
                        "type": "string"
                    }
                }
            },
            "TrainResponse": {
                "title": "TrainResponse",
                "required": [
                    "info"
                ],
                "type": "object",
                "properties": {
                    "info": {
                        "title": "Train info",
                        "type": "string",
                        "description": "Response string from train embedding or hypernetwork task."
                    }
                }
            },
            "UpscalerItem": {
                "title": "UpscalerItem",
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string"
                    },
                    "model_name": {
                        "title": "Model Name",
                        "type": "string"
                    },
                    "model_path": {
                        "title": "Path",
                        "type": "string"
                    },
                    "model_url": {
                        "title": "URL",
                        "type": "string"
                    },
                    "scale": {
                        "title": "Scale",
                        "type": "number"
                    }
                }
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            },
            "modules__api__models__ProgressResponse": {
                "title": "ProgressResponse",
                "required": [
                    "progress",
                    "eta_relative",
                    "state"
                ],
                "type": "object",
                "properties": {
                    "progress": {
                        "title": "Progress",
                        "type": "number",
                        "description": "The progress with a range of 0 to 1"
                    },
                    "eta_relative": {
                        "title": "ETA in secs",
                        "type": "number"
                    },
                    "state": {
                        "title": "State",
                        "type": "object",
                        "description": "The current state snapshot"
                    },
                    "current_image": {
                        "title": "Current image",
                        "type": "string",
                        "description": "The current image in base64 format. opts.show_progress_every_n_steps is required for this to work."
                    },
                    "textinfo": {
                        "title": "Info text",
                        "type": "string",
                        "description": "Info text used by WebUI."
                    }
                }
            },
            "modules__progress__ProgressResponse": {
                "title": "ProgressResponse",
                "required": [
                    "active",
                    "queued",
                    "completed"
                ],
                "type": "object",
                "properties": {
                    "active": {
                        "title": "Whether the task is being worked on right now",
                        "type": "boolean"
                    },
                    "queued": {
                        "title": "Whether the task is in queue",
                        "type": "boolean"
                    },
                    "completed": {
                        "title": "Whether the task has already finished",
                        "type": "boolean"
                    },
                    "progress": {
                        "title": "Progress",
                        "type": "number",
                        "description": "The progress with a range of 0 to 1"
                    },
                    "eta": {
                        "title": "ETA in secs",
                        "type": "number"
                    },
                    "live_preview": {
                        "title": "Live preview image",
                        "type": "string",
                        "description": "Current live preview; a data: uri"
                    },
                    "id_live_preview": {
                        "title": "Live preview image ID",
                        "type": "integer",
                        "description": "Send this together with next request to prevent receiving same image"
                    },
                    "textinfo": {
                        "title": "Info text",
                        "type": "string",
                        "description": "Info text used by WebUI."
                    }
                }
            }
        }
    }
}